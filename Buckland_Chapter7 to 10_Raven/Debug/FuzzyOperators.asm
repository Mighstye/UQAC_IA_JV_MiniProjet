; Listing generated by Microsoft (R) Optimizing Compiler Version 19.14.26431.0 

	TITLE	D:\IA jeux vidéo\Projets\UQAC_IA_JV_MiniProjet\Common\fuzzy\FuzzyOperators.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??1FuzzyTerm@@UAE@XZ				; FuzzyTerm::~FuzzyTerm
PUBLIC	??0FuzzyTerm@@QAE@XZ				; FuzzyTerm::FuzzyTerm
PUBLIC	??_GFuzzyTerm@@UAEPAXI@Z			; FuzzyTerm::`scalar deleting destructor'
PUBLIC	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ	; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
PUBLIC	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate
PUBLIC	?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
PUBLIC	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back
PUBLIC	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
PUBLIC	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
PUBLIC	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
PUBLIC	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
PUBLIC	?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
PUBLIC	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
PUBLIC	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABE_NXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Has_unused_capacity
PUBLIC	?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array
PUBLIC	?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range
PUBLIC	??1FzAND@@UAE@XZ				; FzAND::~FzAND
PUBLIC	??0FzAND@@QAE@ABV0@@Z				; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@0@Z			; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@00@Z		; FzAND::FzAND
PUBLIC	??0FzAND@@QAE@AAVFuzzyTerm@@000@Z		; FzAND::FzAND
PUBLIC	?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ		; FzAND::Clone
PUBLIC	?GetDOM@FzAND@@UBENXZ				; FzAND::GetDOM
PUBLIC	?ClearDOM@FzAND@@UAEXXZ				; FzAND::ClearDOM
PUBLIC	?ORwithDOM@FzAND@@UAEXN@Z			; FzAND::ORwithDOM
PUBLIC	??_GFzAND@@UAEPAXI@Z				; FzAND::`scalar deleting destructor'
PUBLIC	??1FzOR@@UAE@XZ					; FzOR::~FzOR
PUBLIC	??0FzOR@@QAE@ABV0@@Z				; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@0@Z			; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@00@Z			; FzOR::FzOR
PUBLIC	??0FzOR@@QAE@AAVFuzzyTerm@@000@Z		; FzOR::FzOR
PUBLIC	?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ		; FzOR::Clone
PUBLIC	?GetDOM@FzOR@@UBENXZ				; FzOR::GetDOM
PUBLIC	?ClearDOM@FzOR@@UAEXXZ				; FzOR::ClearDOM
PUBLIC	?ORwithDOM@FzOR@@UAEXN@Z			; FzOR::ORwithDOM
PUBLIC	??_GFzOR@@UAEPAXI@Z				; FzOR::`scalar deleting destructor'
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
PUBLIC	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
PUBLIC	??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::move<FuzzyTerm * &>
PUBLIC	??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>
PUBLIC	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
PUBLIC	??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE@$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>
PUBLIC	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
PUBLIC	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Destroy_range1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<FuzzyTerm *> >
PUBLIC	??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::allocator<FuzzyTerm *> >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
PUBLIC	??$_Ptr_move_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVFuzzyTerm@@0@Z ; std::_Ptr_move_cat<FuzzyTerm *,FuzzyTerm *>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAVFuzzyTerm@@PAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@00AAV?$allocator@PAVFuzzyTerm@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<FuzzyTerm *,FuzzyTerm *,std::allocator<FuzzyTerm *> >
PUBLIC	??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@QAPAV1@@Z ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>
PUBLIC	??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>
PUBLIC	??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_7FuzzyTerm@@6B@				; FuzzyTerm::`vftable'
PUBLIC	??_7FzAND@@6B@					; FzAND::`vftable'
PUBLIC	??_7FzOR@@6B@					; FzOR::`vftable'
PUBLIC	??_C@_1JK@DFOLKPOC@?$AAd?$AA?3?$AA?2?$AAi?$AAa?$AA?5?$AAj?$AAe?$AAu?$AAx?$AA?5?$AAv?$AAi?$AAd?$AA?i?$AAo?$AA?2?$AAp?$AAr?$AAo?$AAj?$AAe?$AAt?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA_?$AAi?$AAa@ ; `string'
PUBLIC	??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; `string'
PUBLIC	??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EI@HCADPHFC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EK@FMDACDNC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@ ; `string'
PUBLIC	??_R4FuzzyTerm@@6B@				; FuzzyTerm::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFuzzyTerm@@@8				; FuzzyTerm `RTTI Type Descriptor'
PUBLIC	??_R3FuzzyTerm@@8				; FuzzyTerm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FuzzyTerm@@8				; FuzzyTerm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FuzzyTerm@@8			; FuzzyTerm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FzAND@@6B@					; FzAND::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFzAND@@@8				; FzAND `RTTI Type Descriptor'
PUBLIC	??_R3FzAND@@8					; FzAND::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FzAND@@8					; FzAND::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FzAND@@8				; FzAND::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FzOR@@6B@					; FzOR::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFzOR@@@8				; FzOR `RTTI Type Descriptor'
PUBLIC	??_R3FzOR@@8					; FzOR::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FzOR@@8					; FzOR::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FzOR@@8				; FzOR::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3810000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_memmove:PROC
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__wassert:PROC
EXTRN	??_EFuzzyTerm@@UAEPAXI@Z:PROC			; FuzzyTerm::`vector deleting destructor'
EXTRN	??_EFzAND@@UAEPAXI@Z:PROC			; FzAND::`vector deleting destructor'
EXTRN	??_EFzOR@@UAEPAXI@Z:PROC			; FzOR::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?MaxInt@@3HB DD	01H DUP (?)				; MaxInt
	ALIGN	8

?MaxDouble@@3NB DQ 01H DUP (?)				; MaxDouble
?MinDouble@@3NB DQ 01H DUP (?)				; MinDouble
?MaxFloat@@3MB DD 01H DUP (?)				; MaxFloat
?MinFloat@@3MB DD 01H DUP (?)				; MinFloat
_BSS	ENDS
CRT$XCU	SEGMENT
?MaxInt$initializer$@@3P6AXXZA DD FLAT:??__EMaxInt@@YAXXZ ; MaxInt$initializer$
CRT$XCU	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3810000000000000
CONST	SEGMENT
__real@3810000000000000 DQ 03810000000000000r	; 1.17549e-38
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@FzOR@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FzOR@@8 DD FLAT:??_R0?AVFzOR@@@8		; FzOR::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R2FzOR@@8
rdata$r	SEGMENT
??_R2FzOR@@8 DD	FLAT:??_R1A@?0A@EA@FzOR@@8		; FzOR::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R3FzOR@@8
rdata$r	SEGMENT
??_R3FzOR@@8 DD	00H					; FzOR::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFzOR@@@8
data$r	SEGMENT
??_R0?AVFzOR@@@8 DD FLAT:??_7type_info@@6B@		; FzOR `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFzOR@@', 00H
data$r	ENDS
;	COMDAT ??_R4FzOR@@6B@
rdata$r	SEGMENT
??_R4FzOR@@6B@ DD 00H					; FzOR::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFzOR@@@8
	DD	FLAT:??_R3FzOR@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FzAND@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FzAND@@8 DD FLAT:??_R0?AVFzAND@@@8	; FzAND::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R2FzAND@@8
rdata$r	SEGMENT
??_R2FzAND@@8 DD FLAT:??_R1A@?0A@EA@FzAND@@8		; FzAND::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R3FzAND@@8
rdata$r	SEGMENT
??_R3FzAND@@8 DD 00H					; FzAND::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFzAND@@@8
data$r	SEGMENT
??_R0?AVFzAND@@@8 DD FLAT:??_7type_info@@6B@		; FzAND `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFzAND@@', 00H
data$r	ENDS
;	COMDAT ??_R4FzAND@@6B@
rdata$r	SEGMENT
??_R4FzAND@@6B@ DD 00H					; FzAND::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFzAND@@@8
	DD	FLAT:??_R3FzAND@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FuzzyTerm@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FuzzyTerm@@8 DD FLAT:??_R0?AVFuzzyTerm@@@8 ; FuzzyTerm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R2FuzzyTerm@@8
rdata$r	SEGMENT
??_R2FuzzyTerm@@8 DD FLAT:??_R1A@?0A@EA@FuzzyTerm@@8	; FuzzyTerm::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3FuzzyTerm@@8
rdata$r	SEGMENT
??_R3FuzzyTerm@@8 DD 00H				; FuzzyTerm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFuzzyTerm@@@8
data$r	SEGMENT
??_R0?AVFuzzyTerm@@@8 DD FLAT:??_7type_info@@6B@	; FuzzyTerm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFuzzyTerm@@', 00H
data$r	ENDS
;	COMDAT ??_R4FuzzyTerm@@6B@
rdata$r	SEGMENT
??_R4FuzzyTerm@@6B@ DD 00H				; FuzzyTerm::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFuzzyTerm@@@8
	DD	FLAT:??_R3FuzzyTerm@@8
rdata$r	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@FMDACDNC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
CONST	SEGMENT
??_C@_1EK@FMDACDNC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@HCADPHFC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EI@HCADPHFC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'u', 00H
	DB	'z', 00H, 'z', 00H, 'y', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'm'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'+', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '6', 00H, '4', 00H
	DB	'2', 00H, '8', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, '<', 00H
	DB	'F', 00H, 'z', 00H, 'O', 00H, 'R', 00H, ':', 00H, ':', 00H, 'O'
	DB	00H, 'R', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'D', 00H
	DB	'O', 00H, 'M', 00H, '>', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, '<', 00H
	DB	'F', 00H, 'z', 00H, 'O', 00H, 'R', 00H, ':', 00H, ':', 00H, 'C'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'D', 00H, 'O', 00H
	DB	'M', 00H, '>', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@DFOLKPOC@?$AAd?$AA?3?$AA?2?$AAi?$AAa?$AA?5?$AAj?$AAe?$AAu?$AAx?$AA?5?$AAv?$AAi?$AAd?$AA?i?$AAo?$AA?2?$AAp?$AAr?$AAo?$AAj?$AAe?$AAt?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA_?$AAi?$AAa@
CONST	SEGMENT
??_C@_1JK@DFOLKPOC@?$AAd?$AA?3?$AA?2?$AAi?$AAa?$AA?5?$AAj?$AAe?$AAu?$AAx?$AA?5?$AAv?$AAi?$AAd?$AA?i?$AAo?$AA?2?$AAp?$AAr?$AAo?$AAj?$AAe?$AAt?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA_?$AAi?$AAa@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'i', 00H, 'a', 00H, ' ', 00H, 'j', 00H
	DB	'e', 00H, 'u', 00H, 'x', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 'd'
	DB	00H, 0e9H, 00H, 'o', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H
	DB	'j', 00H, 'e', 00H, 't', 00H, 's', 00H, '\', 00H, 'u', 00H, 'q'
	DB	00H, 'a', 00H, 'c', 00H, '_', 00H, 'i', 00H, 'a', 00H, '_', 00H
	DB	'j', 00H, 'v', 00H, '_', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 'p', 00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e', 00H, 't', 00H
	DB	'\', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n'
	DB	00H, '\', 00H, 'f', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'y', 00H
	DB	'\', 00H, 'f', 00H, 'u', 00H, 'z', 00H, 'z', 00H, 'y', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 's', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7FzOR@@6B@
CONST	SEGMENT
??_7FzOR@@6B@ DD FLAT:??_R4FzOR@@6B@			; FzOR::`vftable'
	DD	FLAT:??_EFzOR@@UAEPAXI@Z
	DD	FLAT:?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	DD	FLAT:?GetDOM@FzOR@@UBENXZ
	DD	FLAT:?ClearDOM@FzOR@@UAEXXZ
	DD	FLAT:?ORwithDOM@FzOR@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_7FzAND@@6B@
CONST	SEGMENT
??_7FzAND@@6B@ DD FLAT:??_R4FzAND@@6B@			; FzAND::`vftable'
	DD	FLAT:??_EFzAND@@UAEPAXI@Z
	DD	FLAT:?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	DD	FLAT:?GetDOM@FzAND@@UBENXZ
	DD	FLAT:?ClearDOM@FzAND@@UAEXXZ
	DD	FLAT:?ORwithDOM@FzAND@@UAEXN@Z
CONST	ENDS
;	COMDAT ??_7FuzzyTerm@@6B@
CONST	SEGMENT
??_7FuzzyTerm@@6B@ DD FLAT:??_R4FuzzyTerm@@6B@		; FuzzyTerm::`vftable'
	DD	FLAT:??_EFuzzyTerm@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '6', 00H, '4', 00H
	DB	'2', 00H, '8', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '6', 00H, '4', 00H
	DB	'2', 00H, '8', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetDOM@FzOR@@UBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDOM@FzOR@@UBENXZ$2
__ehfuncinfo$?GetDOM@FzOR@@UBENXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDOM@FzOR@@UBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ$0
__ehfuncinfo$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$1
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$1
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$1
__ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzOR@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$4
__ehfuncinfo$??0FzOR@@QAE@ABV0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0FzOR@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1FzOR@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ORwithDOM@FzAND@@UAEXN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$2
__ehfuncinfo$?ORwithDOM@FzAND@@UAEXN@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ORwithDOM@FzAND@@UAEXN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ClearDOM@FzAND@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$2
__ehfuncinfo$?ClearDOM@FzAND@@UAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ClearDOM@FzAND@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetDOM@FzAND@@UBENXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDOM@FzAND@@UBENXZ$2
__ehfuncinfo$?GetDOM@FzAND@@UBENXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDOM@FzAND@@UBENXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ$0
__ehfuncinfo$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$1
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$1
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$1
__ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FzAND@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$4
__ehfuncinfo$??0FzAND@@QAE@ABV0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0FzAND@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1FzAND@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MaxDouble$initializer$@@3P6AXXZA DD FLAT:??__EMaxDouble@@YAXXZ ; MaxDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinDouble$initializer$@@3P6AXXZA DD FLAT:??__EMinDouble@@YAXXZ ; MinDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MaxFloat$initializer$@@3P6AXXZA DD FLAT:??__EMaxFloat@@YAXXZ ; MaxFloat$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinFloat$initializer$@@3P6AXXZA DD FLAT:??__EMinFloat@@YAXXZ ; MinFloat$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z PROC ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>, COMDAT

; 2428 : 	{	// implement copy-like function as memmove

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2429 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 2430 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 2431 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 2432 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 2433 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 2434 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 2435 : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@QAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@QAPAV1@@Z PROC ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>, COMDAT

; 492  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 493  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 494  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 495  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@QAPAV1@@Z ENDP ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAVFuzzyTerm@@PAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@00AAV?$allocator@PAVFuzzyTerm@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAVFuzzyTerm@@PAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@00AAV?$allocator@PAVFuzzyTerm@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<FuzzyTerm *,FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT

; 242  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 243  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAPAVFuzzyTerm@@PAPAV1@@std@@YAPAPAVFuzzyTerm@@PAPAV1@00@Z ; std::_Copy_memmove<FuzzyTerm * *,FuzzyTerm * *>
	add	esp, 12					; 0000000cH

; 244  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@PAVFuzzyTerm@@PAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@00AAV?$allocator@PAVFuzzyTerm@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<FuzzyTerm *,FuzzyTerm *,std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$_Ptr_move_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVFuzzyTerm@@0@Z PROC ; std::_Ptr_move_cat<FuzzyTerm *,FuzzyTerm *>, COMDAT

; 1016 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1017 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1018 : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVFuzzyTerm@@0@Z ENDP ; std::_Ptr_move_cat<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z PROC ; std::_Unchecked<FuzzyTerm * *>, COMDAT

; 461  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 462  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 463  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ENDP ; std::_Unchecked<FuzzyTerm * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 1073741823 ; 3fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z
_TEXT	SEGMENT
$T1 = -30						; size = 1
$T2 = -29						; size = 1
__UDest$ = -24						; size = 4
__ULast$ = -16						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z PROC ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::allocator<FuzzyTerm *> >, COMDAT

; 250  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 251  : 		// note: only called internally from elsewhere in the STL, debug checks
; 252  : 		// and deprecation warnings omitted
; 253  : 	const auto _UFirst = _Unchecked(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Unchecked(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Unchecked(_Dest);

	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Unchecked@PAPAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unchecked<FuzzyTerm * *>
	add	esp, 4
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	return (_Rechecked(_Dest,

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR __UDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$_Ptr_move_cat@PAVFuzzyTerm@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVFuzzyTerm@@0@Z ; std::_Ptr_move_cat<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __ULast$[ebp]
	push	edx
	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Uninitialized_move_al_unchecked@PAVFuzzyTerm@@PAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@00AAV?$allocator@PAVFuzzyTerm@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<FuzzyTerm *,FuzzyTerm *,std::allocator<FuzzyTerm *> >
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PAPAVFuzzyTerm@@PAPAV1@@std@@YAAAPAPAVFuzzyTerm@@AAPAPAV1@QAPAV1@@Z ; std::_Rechecked<FuzzyTerm * *,FuzzyTerm * *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>())));
; 260  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Uninitiali:
	DD	2
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Uninitiali
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ENDP ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<FuzzyTerm *> >, COMDAT

; 1189 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

	push	ebp
	mov	ebp, esp

; 1190 : 		// nothing to do
; 1191 : 	}

	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 94   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 95   : 	size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 96   : 	if (_Block_size <= _Bytes)

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN2@Allocate_m

; 97   : 		{	// add overflow, try allocating all of memory and assume the
; 98   : 			// allocation function will throw bad_alloc
; 99   : 		_Block_size = static_cast<size_t>(-1);

	mov	DWORD PTR __Block_size$[ebp], -1
$LN2@Allocate_m:

; 100  : 		}
; 101  : 
; 102  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax

; 103  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);	// validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	jne	SHORT $LN3@Allocate_m
	mov	eax, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
	test	eax, eax
	je	SHORT $LN5@Allocate_m
	xor	ecx, ecx
	jne	SHORT $LN6@Allocate_m
$LN5@Allocate_m:
	push	OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	103					; 00000067H
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Allocate_m
	int	3
$LN6@Allocate_m:
	push	0
	push	103					; 00000067H
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Allocate_m:

; 104  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 105  : 		& ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 106  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 107  : 
; 108  :   #ifdef _DEBUG
; 109  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 110  :   #endif /* _DEBUG */
; 111  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 112  : 	}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<FuzzyTerm *> >, COMDAT

; 1198 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1199 : 		// note that this is an optimization for debug mode codegen;
; 1200 : 		// in release mode the BE removes all of this
; 1201 : 	using _Val = typename _Alloc::value_type;
; 1202 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<FuzzyTerm *> >
	add	esp, 16					; 00000010H

; 1203 : 		is_trivially_destructible<_Val>,
; 1204 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1205 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 918  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 919  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 920  : 			_Objty(_STD forward<_Types>(_Args)...);
; 921  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 388  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 389  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 390  : 	}

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1306 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

	push	ebp
	mov	ebp, esp

; 1307 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1308 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 925  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 926  : 		_Ptr->~_Uty();
; 927  : 		}

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 910  : 		{	// deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 911  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 912  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 913  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>, COMDAT
; _this$ = ecx

; 1025 : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1026 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 1035 : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1036 : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 1037 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 210  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 211  :  #if defined(_M_IX86) || defined(_M_X64)
; 212  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 213  : 		{	// boost the alignment of big allocations to help autovectorization
; 214  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 215  : 		}
; 216  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 217  : 
; 218  : 	::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 219  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 191  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 192  :  #if defined(_M_IX86) || defined(_M_X64)
; 193  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 194  : 		{	// boost the alignment of big allocations to help autovectorization
; 195  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 196  : 		}
; 197  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 198  : 
; 199  : 	if (_Bytes != 0)

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 200  : 		{
; 201  : 		return (_Traits::_Allocate(_Bytes));

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 202  : 		}
; 203  : 
; 204  : 	return (nullptr);

	xor	eax, eax
$LN1@Allocate:

; 205  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>, COMDAT
; _this$ = ecx

; 315  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ ; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >

; 316  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Min_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Min_value
$LN3@Min_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 25   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 991  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 992  : 			// pre: !_Has_unused_capacity()
; 993  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 994  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 995  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 996  : 
; 997  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 998  : 			{
; 999  : 			_Xlength();

	call	?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength
$LN2@Emplace_re:

; 1000 : 			}
; 1001 : 
; 1002 : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 1003 : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 1004 : 
; 1005 : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 1006 : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 1007 : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 1008 : 
; 1009 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1010 : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv206[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 1011 : 		_Constructed_first = _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 1012 : 
; 1013 : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 1014 : 			{	// at back, provide strong guarantee
; 1015 : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept

; 1016 : 			}
; 1017 : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 1018 : 			{	// provide basic guarantee
; 1019 : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove

; 1020 : 			_Constructed_first = _Newvec;

	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 1021 : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$0:

; 1022 : 			}
; 1023 : 		_CATCH_ALL
; 1024 : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 1025 : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate

; 1026 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1027 : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z$1:

; 1028 : 
; 1029 : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array

; 1030 : 		return (this->_Myfirst() + _Whereoff);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN6@Emplace_re:

; 1031 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>, COMDAT

; 918  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 919  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 920  : 			_Objty(_STD forward<_Types>(_Args)...);
; 921  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z PROC ; std::_Unfancy<FuzzyTerm *>, COMDAT

; 388  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 389  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 390  : 	}

	pop	ebp
	ret	0
??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ENDP ; std::_Unfancy<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE@$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE@$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 949  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 950  : 			// pre: _Has_unused_capacity()
; 951  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@PAVFuzzyTerm@@@std@@YAPAPAVFuzzyTerm@@PAPAV1@@Z ; std::_Unfancy<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	call	??$construct@PAVFuzzyTerm@@PAV1@@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAXAAV?$allocator@PAVFuzzyTerm@@@1@QAPAVFuzzyTerm@@$$QAPAV3@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::construct<FuzzyTerm *,FuzzyTerm *>
	add	esp, 12					; 0000000cH

; 952  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range

; 953  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 954  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 955  : #if _HAS_CXX17
; 956  : 		return (_Result);
; 957  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 958  : 		(void)_Result;
; 959  : #endif /* _HAS_CXX17 */
; 960  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE@$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z PROC ; std::forward<FuzzyTerm *>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ENDP ; std::forward<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 965  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABE_NXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 967  : 			{
; 968  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAE@$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_back_with_unused_capacity<FuzzyTerm *>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 969  : 			}
; 970  : 
; 971  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@PAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::forward<FuzzyTerm *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEPAPAVFuzzyTerm@@QAPAV2@$$QAPAV2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Emplace_reallocate<FuzzyTerm *>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 972  : #if _HAS_CXX17
; 973  : 		return (_Result);
; 974  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 975  : 		(void)_Result;
; 976  : #endif /* _HAS_CXX17 */
; 977  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z PROC ; std::move<FuzzyTerm * &>, COMDAT

; 1555 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1556 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1557 : 	}

	pop	ebp
	ret	0
??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ENDP ; std::move<FuzzyTerm * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT

; 372  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 373  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 374  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >, COMDAT

; 372  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 373  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 374  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++, COMDAT
; _this$ = ecx

; 306  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++

; 308  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 309  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*, COMDAT
; _this$ = ecx

; 296  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*

; 298  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 290  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 		: _Mybase(_Parg, _Pvector)

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 291  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 284  : 	_Vector_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		{	// construct with null vector pointer

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 286  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat, COMDAT
; _this$ = ecx

; 225  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 		if (this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN1@Compat

; 227  : 			{
; 228  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	228					; 000000e4H
	push	OFFSET ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	228					; 000000e4H
	push	OFFSET ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1NK@PBOLGCJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN1@Compat:

; 229  : 			}
; 230  : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=, COMDAT
; _this$ = ecx

; 198  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 200  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==, COMDAT
; _this$ = ecx

; 192  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Compat

; 194  : 		return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 195  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++, COMDAT
; _this$ = ecx

; 78   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 79   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 80   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax

; 81   : 		if (_Mycont == 0
; 82   : 			|| _Ptr == nullptr
; 83   : 			|| _Mycont->_Mylast <= _Ptr)

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator
$LN3@operator:

; 84   : 			{	// report error
; 85   : 			_DEBUG_ERROR("vector iterator not incrementable");

	push	85					; 00000055H
	push	OFFSET ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	85					; 00000055H
	push	OFFSET ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OC@CGPGIJAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1EI@HCADPHFC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 86   : 			}
; 87   : 
; 88   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 89   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 90   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 91   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 92   : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr < _Mycont->_Mylast);
; 93   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 94   : 
; 95   : 		++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 96   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 97   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*, COMDAT
; _this$ = ecx

; 49   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 50   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 51   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax

; 52   : 		if (_Mycont == 0
; 53   : 			|| _Ptr == _Tptr()
; 54   : 			|| _Ptr < _Mycont->_Myfirst
; 55   : 			|| _Mycont->_Mylast <= _Ptr)

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+4]
	jb	SHORT $LN3@operator
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator
$LN3@operator:

; 56   : 			{	// report error
; 57   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	push	57					; 00000039H
	push	OFFSET ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	57					; 00000039H
	push	OFFSET ??_C@_1MO@DLPJBKBO@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OA@BIBNCNDA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1EK@FMDACDNC@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 58   : 			}
; 59   : 
; 60   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 61   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 62   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 63   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 64   : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast);
; 65   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 66   : 
; 67   : 		_Analysis_assume_(_Ptr != _Tptr());
; 68   : 
; 69   : 		return (*_Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 70   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 41   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 43   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 44   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 37   : 		{	// construct with null pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 36   : 		: _Ptr()

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 38   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFzOR@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFzOR@@UAEPAXI@Z PROC				; FzOR::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FzOR@@UAE@XZ				; FzOR::~FzOR
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFzOR@@UAEPAXI@Z ENDP				; FzOR::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.h
;	COMDAT ?ORwithDOM@FzOR@@UAEXN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 8
?ORwithDOM@FzOR@@UAEXN@Z PROC				; FzOR::ORwithDOM, COMDAT
; _this$ = ecx

; 87   :   void ORwithDOM(double val){assert(0 && "<FzOR::ORwithDOM>: invalid context");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@ORwithDOM
	push	87					; 00000057H
	push	OFFSET ??_C@_1JK@DFOLKPOC@?$AAd?$AA?3?$AA?2?$AAi?$AAa?$AA?5?$AAj?$AAe?$AAu?$AAx?$AA?5?$AAv?$AAi?$AAd?$AA?i?$AAo?$AA?2?$AAp?$AAr?$AAo?$AAj?$AAe?$AAt?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA_?$AAi?$AAa@
	push	OFFSET ??_C@_1FE@EKNHDPMB@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAO?$AAR?$AAw?$AAi?$AAt?$AAh?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@ORwithDOM:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ORwithDOM@FzOR@@UAEXN@Z ENDP				; FzOR::ORwithDOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.h
;	COMDAT ?ClearDOM@FzOR@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDOM@FzOR@@UAEXXZ PROC				; FzOR::ClearDOM, COMDAT
; _this$ = ecx

; 86   :   void ClearDOM(){assert(0 && "<FzOR::ClearDOM>: invalid context");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	jne	SHORT $LN1@ClearDOM
	push	86					; 00000056H
	push	OFFSET ??_C@_1JK@DFOLKPOC@?$AAd?$AA?3?$AA?2?$AAi?$AAa?$AA?5?$AAj?$AAe?$AAu?$AAx?$AA?5?$AAv?$AAi?$AAd?$AA?i?$AAo?$AA?2?$AAp?$AAr?$AAo?$AAj?$AAe?$AAt?$AAs?$AA?2?$AAu?$AAq?$AAa?$AAc?$AA_?$AAi?$AAa@
	push	OFFSET ??_C@_1FC@EJGEACIH@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AA?$DM?$AAF?$AAz?$AAO?$AAR?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAD?$AAO?$AAM?$AA?$DO?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@ClearDOM:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDOM@FzOR@@UAEXXZ ENDP				; FzOR::ClearDOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?GetDOM@FzOR@@UBENXZ
_TEXT	SEGMENT
tv132 = -108						; size = 4
tv165 = -104						; size = 8
tv91 = -96						; size = 4
tv140 = -92						; size = 4
tv65 = -88						; size = 4
tv138 = -84						; size = 4
$T2 = -80						; size = 8
$T3 = -72						; size = 12
$T4 = -57						; size = 1
$T5 = -56						; size = 12
_curTerm$ = -40						; size = 12
_largest$ = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetDOM@FzOR@@UBENXZ PROC				; FzOR::GetDOM, COMDAT
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDOM@FzOR@@UBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 148  :   double largest = MinFloat;

	movsd	xmm0, QWORD PTR __real@3810000000000000
	movsd	QWORD PTR _largest$[ebp], xmm0

; 149  : 
; 150  :   std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 151  :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@GetDOM
$LN2@GetDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@GetDOM:
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv140[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T4[ebp]
	test	edx, edx
	je	SHORT $LN3@GetDOM

; 152  :   {
; 153  :     if ((*curTerm)->GetDOM() > largest)

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv165[ebp]
	movsd	xmm0, QWORD PTR tv165[ebp]
	comisd	xmm0, QWORD PTR _largest$[ebp]
	jbe	SHORT $LN5@GetDOM

; 154  :     {
; 155  :       largest = (*curTerm)->GetDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _largest$[ebp]
$LN5@GetDOM:

; 156  :     }
; 157  :   }

	jmp	$LN2@GetDOM
$LN3@GetDOM:

; 158  : 
; 159  :   return largest;

	movsd	xmm0, QWORD PTR _largest$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	fld	QWORD PTR $T2[ebp]

; 160  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@GetDOM:
	DD	1
	DD	$LN12@GetDOM
$LN12@GetDOM:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@GetDOM
$LN10@GetDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDOM@FzOR@@UBENXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetDOM@FzOR@@UBENXZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?GetDOM@FzOR@@UBENXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDOM@FzOR@@UBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDOM@FzOR@@UBENXZ ENDP				; FzOR::GetDOM
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.h
;	COMDAT ?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ PROC			; FzOR::Clone, COMDAT
; _this$ = ecx

; 81   :   FuzzyTerm* Clone()const{return new FzOR(*this);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0FzOR@@QAE@ABV0@@Z			; FzOR::FzOR
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@FzOR@@UBEPAVFuzzyTerm@@XZ ENDP			; FzOR::Clone
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
_op4$ = 20						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@000@Z PROC			; FzOR::FzOR, COMDAT
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 125  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T5[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 126  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 127  :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 128  :    m_Terms.push_back(op4.Clone());

	mov	edx, DWORD PTR _op4$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op4$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 129  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@000@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@00@Z PROC			; FzOR::FzOR, COMDAT
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 117  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 118  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 119  :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 120  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@00@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
??0FzOR@@QAE@AAVFuzzyTerm@@0@Z PROC			; FzOR::FzOR, COMDAT
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 110  :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 111  :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 112  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@AAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@AAVFuzzyTerm@@0@Z ENDP			; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzOR@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv146 = -84						; size = 4
tv158 = -80						; size = 4
tv86 = -76						; size = 4
tv156 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 12
$T4 = -49						; size = 1
$T5 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fa$ = 8						; size = 4
??0FzOR@@QAE@ABV0@@Z PROC				; FzOR::FzOR, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzOR@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 100  :    std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 101  :    for (curTerm = fa.m_Terms.begin(); curTerm != fa.m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv156[ebp], eax
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzOR
$LN2@FzOR:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzOR:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv158[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T4[ebp]
	test	eax, eax
	je	SHORT $LN3@FzOR

; 102  :    {
; 103  :      m_Terms.push_back((*curTerm)->Clone());

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv146[ebp], ecx
	mov	edx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 104  :    }

	jmp	SHORT $LN2@FzOR
$LN3@FzOR:

; 105  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FzOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN14@FzOR:
	DD	1
	DD	$LN13@FzOR
$LN13@FzOR:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@FzOR
$LN11@FzOR:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$2:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0FzOR@@QAE@ABV0@@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0FzOR@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzOR@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzOR@@QAE@ABV0@@Z ENDP				; FzOR::FzOR
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??1FzOR@@UAE@XZ
_TEXT	SEGMENT
tv147 = -76						; size = 4
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 12
$T5 = -49						; size = 1
$T6 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FzOR@@UAE@XZ PROC					; FzOR::~FzOR, COMDAT
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1FzOR@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzOR@@6B@

; 134  :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 135  :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzOR
$LN2@FzOR:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzOR:
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T5[ebp], al
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T5[ebp]
	test	eax, eax
	je	SHORT $LN3@FzOR

; 136  :   {
; 137  :     delete *curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@FzOR
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN7@FzOR
$LN6@FzOR:
	mov	DWORD PTR tv147[ebp], 0
$LN7@FzOR:

; 138  :   }

	jmp	SHORT $LN2@FzOR
$LN3@FzOR:

; 139  : }

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@FzOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@FzOR:
	DD	1
	DD	$LN10@FzOR
$LN10@FzOR:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@FzOR
$LN8@FzOR:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1FzOR@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1FzOR@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FzOR@@UAE@XZ ENDP					; FzOR::~FzOR
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFzAND@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFzAND@@UAEPAXI@Z PROC				; FzAND::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FzAND@@UAE@XZ			; FzAND::~FzAND
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFzAND@@UAEPAXI@Z ENDP				; FzAND::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?ORwithDOM@FzAND@@UAEXN@Z
_TEXT	SEGMENT
tv131 = -80						; size = 4
tv139 = -76						; size = 4
tv65 = -72						; size = 4
tv137 = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -49						; size = 1
$T4 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_val$ = 8						; size = 8
?ORwithDOM@FzAND@@UAEXN@Z PROC				; FzAND::ORwithDOM, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ORwithDOM@FzAND@@UAEXN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 76   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 77   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@ORwithDOM
$LN2@ORwithDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@ORwithDOM:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T3[ebp]
	test	edx, edx
	je	SHORT $LN3@ORwithDOM

; 78   :   {
; 79   :     (*curTerm)->ORwithDOM(val);

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], eax
	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   :   }

	jmp	SHORT $LN2@ORwithDOM
$LN3@ORwithDOM:

; 81   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ORwithDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN12@ORwithDOM:
	DD	1
	DD	$LN11@ORwithDOM
$LN11@ORwithDOM:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@ORwithDOM
$LN9@ORwithDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ORwithDOM@FzAND@@UAEXN@Z$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?ORwithDOM@FzAND@@UAEXN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ORwithDOM@FzAND@@UAEXN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ORwithDOM@FzAND@@UAEXN@Z ENDP				; FzAND::ORwithDOM
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?ClearDOM@FzAND@@UAEXXZ
_TEXT	SEGMENT
tv131 = -80						; size = 4
tv138 = -76						; size = 4
tv65 = -72						; size = 4
tv136 = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -49						; size = 1
$T4 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ClearDOM@FzAND@@UAEXXZ PROC				; FzAND::ClearDOM, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ClearDOM@FzAND@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 86   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 87   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@ClearDOM
$LN2@ClearDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@ClearDOM:
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T3[ebp]
	test	edx, edx
	je	SHORT $LN3@ClearDOM

; 88   :   {
; 89   :     (*curTerm)->ClearDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   :   }

	jmp	SHORT $LN2@ClearDOM
$LN3@ClearDOM:

; 91   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ClearDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@ClearDOM:
	DD	1
	DD	$LN11@ClearDOM
$LN11@ClearDOM:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@ClearDOM
$LN9@ClearDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?ClearDOM@FzAND@@UAEXXZ$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?ClearDOM@FzAND@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ClearDOM@FzAND@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ClearDOM@FzAND@@UAEXXZ ENDP				; FzAND::ClearDOM
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?GetDOM@FzAND@@UBENXZ
_TEXT	SEGMENT
tv132 = -108						; size = 4
tv165 = -104						; size = 8
tv91 = -96						; size = 4
tv140 = -92						; size = 4
tv65 = -88						; size = 4
tv138 = -84						; size = 4
$T2 = -80						; size = 8
$T3 = -72						; size = 12
$T4 = -57						; size = 1
$T5 = -56						; size = 12
_curTerm$ = -40						; size = 12
_smallest$ = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetDOM@FzAND@@UBENXZ PROC				; FzAND::GetDOM, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDOM@FzAND@@UBENXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 58   :   double smallest = MaxDouble;

	movsd	xmm0, QWORD PTR __real@7fefffffffffffff
	movsd	QWORD PTR _smallest$[ebp], xmm0

; 59   : 
; 60   :   std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 61   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@GetDOM
$LN2@GetDOM:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@GetDOM:
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv140[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T4[ebp]
	test	edx, edx
	je	SHORT $LN3@GetDOM

; 62   :   {
; 63   :     if ((*curTerm)->GetDOM() < smallest)

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv165[ebp]
	movsd	xmm0, QWORD PTR _smallest$[ebp]
	comisd	xmm0, QWORD PTR tv165[ebp]
	jbe	SHORT $LN5@GetDOM

; 64   :     {
; 65   :       smallest = (*curTerm)->GetDOM();

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _smallest$[ebp]
$LN5@GetDOM:

; 66   :     }
; 67   :   }

	jmp	$LN2@GetDOM
$LN3@GetDOM:

; 68   : 
; 69   :   return smallest;

	movsd	xmm0, QWORD PTR _smallest$[ebp]
	movsd	QWORD PTR $T2[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	fld	QWORD PTR $T2[ebp]

; 70   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDOM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@GetDOM:
	DD	1
	DD	$LN12@GetDOM
$LN12@GetDOM:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@GetDOM
$LN10@GetDOM:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDOM@FzAND@@UBENXZ$0:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetDOM@FzAND@@UBENXZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?GetDOM@FzAND@@UBENXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDOM@FzAND@@UBENXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDOM@FzAND@@UBENXZ ENDP				; FzAND::GetDOM
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.h
;	COMDAT ?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
tv79 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ PROC			; FzAND::Clone, COMDAT
; _this$ = ecx

; 45   :   FuzzyTerm* Clone()const{return new FzAND(*this);}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0FzAND@@QAE@ABV0@@Z			; FzAND::FzAND
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv79[ebp], 0
$LN4@Clone:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@FzAND@@UBEPAVFuzzyTerm@@XZ ENDP			; FzAND::Clone
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
_op4$ = 20						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@000@Z PROC			; FzAND::FzAND, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 35   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T5[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 36   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 37   :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 38   :    m_Terms.push_back(op4.Clone());

	mov	edx, DWORD PTR _op4$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op4$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 39   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@000@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
_op3$ = 16						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@00@Z PROC			; FzAND::FzAND, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 27   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 28   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 29   :    m_Terms.push_back(op3.Clone());

	mov	ecx, DWORD PTR _op3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op3$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 30   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@00@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op1$ = 8						; size = 4
_op2$ = 12						; size = 4
??0FzAND@@QAE@AAVFuzzyTerm@@0@Z PROC			; FzAND::FzAND, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 20   :    m_Terms.push_back(op1.Clone());

	mov	ecx, DWORD PTR _op1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 21   :    m_Terms.push_back(op2.Clone());

	mov	edx, DWORD PTR _op2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _op2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 22   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__ehhandler$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@AAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@AAVFuzzyTerm@@0@Z ENDP			; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??0FzAND@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv146 = -84						; size = 4
tv158 = -80						; size = 4
tv86 = -76						; size = 4
tv156 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 12
$T4 = -49						; size = 1
$T5 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fa$ = 8						; size = 4
??0FzAND@@QAE@ABV0@@Z PROC				; FzAND::FzAND, COMDAT
; _this$ = ecx

; 9    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FzAND@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FuzzyTerm@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 10   :    std::vector<FuzzyTerm*>::const_iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 11   :    for (curTerm = fa.m_Terms.begin(); curTerm != fa.m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	mov	DWORD PTR tv156[ebp], eax
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzAND
$LN2@FzAND:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzAND:
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _fa$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv158[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T4[ebp]
	test	eax, eax
	je	SHORT $LN3@FzAND

; 12   :    {
; 13   :      m_Terms.push_back((*curTerm)->Clone());

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAVFuzzyTerm@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv146[ebp], ecx
	mov	edx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back

; 14   :    }

	jmp	SHORT $LN2@FzAND
$LN3@FzAND:

; 15   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@FzAND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN14@FzAND:
	DD	1
	DD	$LN13@FzAND
$LN13@FzAND:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@FzAND
$LN11@FzAND:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$2:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0FzAND@@QAE@ABV0@@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0FzAND@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FzAND@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FzAND@@QAE@ABV0@@Z ENDP				; FzAND::FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ??1FzAND@@UAE@XZ
_TEXT	SEGMENT
tv147 = -76						; size = 4
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 12
$T5 = -49						; size = 1
$T6 = -48						; size = 12
_curTerm$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FzAND@@UAE@XZ PROC					; FzAND::~FzAND, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1FzAND@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FzAND@@6B@

; 44   :   std::vector<FuzzyTerm*>::iterator curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >

; 45   :   for (curTerm = m_Terms.begin(); curTerm != m_Terms.end(); ++curTerm)

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN4@FzAND
$LN2@FzAND:
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator++
$LN4@FzAND:
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
	push	eax
	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator!=
	mov	BYTE PTR $T5[ebp], al
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T5[ebp]
	test	eax, eax
	je	SHORT $LN3@FzAND

; 46   :   {
; 47   :     delete *curTerm;

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QBEAAPAVFuzzyTerm@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::operator*
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@FzAND
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN7@FzAND
$LN6@FzAND:
	mov	DWORD PTR tv147[ebp], 0
$LN7@FzAND:

; 48   :   }

	jmp	SHORT $LN2@FzAND
$LN3@FzAND:

; 49   : }

	lea	ecx, DWORD PTR _curTerm$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@FzAND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@FzAND:
	DD	1
	DD	$LN10@FzAND
$LN10@FzAND:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@FzAND
$LN8@FzAND:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1FzAND@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1FzAND@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FzAND@@UAE@XZ ENDP					; FzAND::~FzAND
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 2035 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2036 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2037 : 
; 2038 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 2039 : 
; 2040 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 2041 : 			{
; 2042 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 2043 : 				{
; 2044 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 2045 : 					{	// skip the iterator
; 2046 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 2047 : 					}
; 2048 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 2049 : 					{	// orphan the iterator
; 2050 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 2051 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 2052 : 					}
; 2053 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 2054 : 			}
; 2055 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength, COMDAT

; 2024 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 2025 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 2026 : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@CAXXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy, COMDAT
; _this$ = ecx

; 2009 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2010 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all

; 2011 : 
; 2012 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 2013 : 			{	// destroy and deallocate old array
; 2014 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 2015 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate

; 2016 : 
; 2017 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 2018 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 2019 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 2020 : 			}
; 2021 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array, COMDAT
; _this$ = ecx

; 1994 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1995 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all

; 1996 : 
; 1997 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1998 : 			{	// destroy and deallocate old array
; 1999 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy

; 2000 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ; std::allocator<FuzzyTerm *>::deallocate
$LN2@Change_arr:

; 2001 : 			}
; 2002 : 
; 2003 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 2004 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	esi, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 2005 : 		this->_Myend() = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	DWORD PTR [eax], esi

; 2006 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXQAPAVFuzzyTerm@@II@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1952 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1953 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1954 : 
; 1955 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1956 : 			{
; 1957 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1958 : 			}
; 1959 : 
; 1960 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1961 : 
; 1962 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1963 : 			{
; 1964 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1965 : 			}
; 1966 : 
; 1967 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1968 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABEII@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy, COMDAT
; _this$ = ecx

; 1947 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1948 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAXPAPAVFuzzyTerm@@0AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Destroy_range<std::allocator<FuzzyTerm *> >
	add	esp, 12					; 0000000cH

; 1949 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@0@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1941 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1942 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1

; 1943 : 			_Disjunction_t<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>{});
; 1944 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1931 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1932 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::allocator<FuzzyTerm *> >
	add	esp, 16					; 00000010H

; 1933 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXPAPAVFuzzyTerm@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove, COMDAT
; _this$ = ecx

; 1926 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVFuzzyTerm@@PAPAV1@V?$allocator@PAVFuzzyTerm@@@std@@@std@@YAPAPAVFuzzyTerm@@QAPAV1@0PAPAV1@AAV?$allocator@PAVFuzzyTerm@@@0@@Z ; std::_Uninitialized_move<FuzzyTerm * *,FuzzyTerm * *,std::allocator<FuzzyTerm *> >
	add	esp, 16					; 00000010H

; 1928 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEPAPAVFuzzyTerm@@PAPAV3@00@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABE_NXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1794 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1795 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1796 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@ABE_NXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity, COMDAT
; _this$ = ecx

; 1783 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1784 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1785 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size, COMDAT
; _this$ = ecx

; 1777 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1778 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1779 : 			_Alty_traits::max_size(this->_Getal())));
; 1780 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size, COMDAT
; _this$ = ecx

; 1772 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1773 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1774 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBEIXZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end, COMDAT
; _this$ = ecx

; 1702 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1703 : 		return (const_iterator(this->_Mylast(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1704 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end, COMDAT
; _this$ = ecx

; 1697 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1698 : 		return (iterator(this->_Mylast(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1699 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::end
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin, COMDAT
; _this$ = ecx

; 1692 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1693 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	call	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > const >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1694 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin, COMDAT
; _this$ = ecx

; 1687 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1688 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@PAPAVFuzzyTerm@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1689 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@2@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::begin
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back, COMDAT
; _this$ = ecx

; 985  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 986  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAPAVFuzzyTerm@@@std@@YA$$QAPAVFuzzyTerm@@AAPAV1@@Z ; std::move<FuzzyTerm * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@PAVFuzzyTerm@@@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@$$QAPAVFuzzyTerm@@@Z ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::emplace_back<FuzzyTerm *>

; 987  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAEX$$QAPAVFuzzyTerm@@@Z ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 942  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@AAEXXZ ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::_Tidy

; 944  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::~vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 699  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >

; 701  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >::vector<FuzzyTerm *,std::allocator<FuzzyTerm *> >
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 354  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 349  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 334  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 336  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 329  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 331  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >, COMDAT
; _this$ = ecx

; 441  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 438  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 439  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 440  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 442  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<FuzzyTerm *> >::_Vector_val<std::_Simple_types<FuzzyTerm *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend, COMDAT
; _this$ = ecx

; 649  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 12					; 0000000cH

; 651  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend, COMDAT
; _this$ = ecx

; 644  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 12					; 0000000cH

; 646  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast, COMDAT
; _this$ = ecx

; 639  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 640  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 8

; 641  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast, COMDAT
; _this$ = ecx

; 634  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 8

; 636  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 629  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 4

; 631  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABQAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 624  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 625  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	add	eax, 4

; 626  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAPAVFuzzyTerm@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data, COMDAT
; _this$ = ecx

; 608  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 609  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second

; 610  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data, COMDAT
; _this$ = ecx

; 603  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 604  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_second

; 605  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal, COMDAT
; _this$ = ecx

; 598  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first

; 600  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal, COMDAT
; _this$ = ecx

; 593  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 594  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Get_first

; 595  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 583  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 584  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 585  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy, COMDAT
; _this$ = ecx

; 572  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data

; 574  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 567  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 568  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 569  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 559  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>

; 560  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Orphan_all

; 561  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 562  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 563  : 		_Myproxy() = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 564  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 550  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 551  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$allocator@PAVFuzzyTerm@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0PAVFuzzyTerm@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVFuzzyTerm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><FuzzyTerm *>

; 552  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 553  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 554  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<FuzzyTerm *> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 555  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Free_proxy

; 511  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::~_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >, COMDAT
; _this$ = ecx

; 495  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 494  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVFuzzyTerm@@@std@@V?$_Vector_val@U?$_Simple_types@PAVFuzzyTerm@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1>::_Compressed_pair<std::allocator<FuzzyTerm *>,std::_Vector_val<std::_Simple_types<FuzzyTerm *> >,1><>

; 496  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Alloc_proxy

; 497  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@PAVFuzzyTerm@@V?$allocator@PAVFuzzyTerm@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >::_Vector_alloc<std::_Vec_base_types<FuzzyTerm *,std::allocator<FuzzyTerm *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size, COMDAT

; 930  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 931  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 1073741823				; 3fffffffH

; 932  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@PAVFuzzyTerm@@@std@@@std@@SAIABV?$allocator@PAVFuzzyTerm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<FuzzyTerm *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z PROC ; std::allocator<FuzzyTerm *>::allocate, COMDAT
; _this$ = ecx

; 1035 : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1036 : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$03@std@@YAII@Z	; std::_Get_size_of_n<4>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 1037 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVFuzzyTerm@@@std@@QAEPAPAVFuzzyTerm@@I@Z ENDP ; std::allocator<FuzzyTerm *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z PROC ; std::allocator<FuzzyTerm *>::deallocate, COMDAT
; _this$ = ecx

; 1029 : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1030 : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 1031 : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 1032 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVFuzzyTerm@@@std@@QAEXQAPAVFuzzyTerm@@I@Z ENDP ; std::allocator<FuzzyTerm *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ PROC		; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>, COMDAT
; _this$ = ecx

; 1018 : 	allocator() _NOEXCEPT

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1019 : 		{	// construct default allocator (do nothing)
; 1020 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVFuzzyTerm@@@std@@QAE@XZ ENDP		; std::allocator<FuzzyTerm *>::allocator<FuzzyTerm *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFuzzyTerm@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFuzzyTerm@@UAEPAXI@Z PROC				; FuzzyTerm::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FuzzyTerm@@UAE@XZ			; FuzzyTerm::~FuzzyTerm
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFuzzyTerm@@UAEPAXI@Z ENDP				; FuzzyTerm::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0FuzzyTerm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FuzzyTerm@@QAE@XZ PROC				; FuzzyTerm::FuzzyTerm, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FuzzyTerm@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FuzzyTerm@@QAE@XZ ENDP				; FuzzyTerm::FuzzyTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyterm.h
;	COMDAT ??1FuzzyTerm@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FuzzyTerm@@UAE@XZ PROC				; FuzzyTerm::~FuzzyTerm, COMDAT
; _this$ = ecx

; 17   :   virtual ~FuzzyTerm(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FuzzyTerm@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1FuzzyTerm@@UAE@XZ ENDP				; FuzzyTerm::~FuzzyTerm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$di	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR ?MinFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$di	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR ?MaxFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$di	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR ?MinDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$di	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR ?MaxDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$di	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR ?MaxInt@@3HB, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 116  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 117  : 	_Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 118  : 
; 119  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 120  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx

; 121  : 
; 122  :   #ifdef _DEBUG
; 123  : 	// If the following asserts, it likely means that we are performing
; 124  : 	// an aligned delete on memory coming from an unaligned allocation.
; 125  : 	if (_Ptr_user[-2] != _Big_allocation_sentinel)

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	je	SHORT $LN2@Adjust_man

; 126  : 		{
; 127  : 		_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

	push	0
	push	127					; 0000007fH
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Adjust_man:

; 128  : 		}
; 129  :   #endif /* _DEBUG */
; 130  : 
; 131  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 132  : 	// in range [_Min_back_shift, _Non_user_size]
; 133  :   #ifdef _DEBUG
; 134  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 135  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 136  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 137  :   #endif /* _DEBUG */
; 138  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx

; 139  : 	if (_Back_shift < _Min_back_shift || _Back_shift > _Non_user_size)

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN4@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	jbe	SHORT $LN3@Adjust_man
$LN4@Adjust_man:

; 140  : 		{
; 141  : 		_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

	push	0
	push	141					; 0000008dH
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Adjust_man:

; 142  : 		}
; 143  : 
; 144  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 145  : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

	push	ebp
	mov	ebp, esp

; 52   : 		return (::operator new(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 53   : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 226  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 227  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 228  : 		if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me

; 229  : 			{	// adopted, remove self from list
; 230  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
$LN2@Orphan_me:

; 231  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_me
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN3@Orphan_me

; 232  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$2[ebp], ecx
	jmp	SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 233  : 
; 234  : 			if (*_Pnext == 0)

	mov	edx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN5@Orphan_me

; 235  : 				{
; 236  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	236					; 000000ecH
	push	OFFSET ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	236					; 000000ecH
	push	OFFSET ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Orphan_me:

; 237  : 				}
; 238  : 
; 239  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 240  : 			_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN6@Orphan_me:

; 241  : 			}
; 242  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 243  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 221  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 222  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 223  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 216  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 218  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 211  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 213  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 182  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		if (_Parent == 0)

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt

; 184  : 			{	// no future parent, just disown current parent
; 185  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 186  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 187  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 188  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 189  : 			}

	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 190  : 		else

	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 191  : 			{	// have a parent, do adoption
; 192  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 193  : 
; 194  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 195  : 			if (_Myproxy != _Parent_proxy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN5@Adopt

; 196  : 				{	// change parentage
; 197  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 198  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 199  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 200  : 				_Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 201  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 202  : 				}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Adopt:

; 203  : 
; 204  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 205  : 			_Myproxy = _Parent_proxy;
; 206  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 207  : 			}
; 208  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@Adopt:
	DD	2
	DD	$LN9@Adopt
$LN9@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@Adopt
$LN7@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 174  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 175  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 176  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 177  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 178  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 179  : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Iterator_b:
	DD	1
	DD	$LN5@Iterator_b
$LN5@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 157  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		if (_Myproxy == _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@operator
	jmp	SHORT $LN3@operator
$LN2@operator:

; 159  : 			;
; 160  : 		else if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@operator

; 161  : 			_Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 162  : 		else

	jmp	SHORT $LN3@operator
$LN4@operator:

; 163  : 			{	// becoming invalid, disown current parent
; 164  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 165  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 166  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:

; 169  : 
; 170  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 171  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@operator:
	DD	1
	DD	$LN9@operator
$LN9@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@operator
$LN7@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 147  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		: _Myproxy(0), _Mynextiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 148  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 251  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 252  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 253  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 254  : 		{	// proxy allocated, drain it
; 255  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 256  : 
; 257  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 258  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 259  : 			(*_Pnext)->_Myproxy = 0;

	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 260  : 		_Myproxy->_Myfirstiter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 261  : 		}

	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 262  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 263  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 132  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 134  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 118  : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		: _Myproxy(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 119  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		: _Mycont(0), _Myfirstiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 107  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 180  :     {

	push	ebp
	mov	ebp, esp

; 181  :         (void)_Size;
; 182  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 183  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 1152 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1153 : 		return (_DBL_MAX);

	fld	QWORD PTR __real@7fefffffffffffff

; 1154 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 1147 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1148 : 		return (_DBL_MIN);

	fld	QWORD PTR __real@0010000000000000

; 1149 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 1089 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1090 : 		return (_FLT_MAX);

	fld	DWORD PTR __real@7f7fffff

; 1091 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 1084 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1085 : 		return (_FLT_MIN);

	fld	DWORD PTR __real@00800000

; 1086 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 683  : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 684  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 685  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\fuzzy\fuzzyoperators.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
