; Listing generated by Microsoft (R) Optimizing Compiler Version 19.14.26431.0 

	TITLE	D:\IA jeux vidéo\Projets\UQAC_IA_JV_MiniProjet\Common\Messaging\MessageDispatcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??0Telegram@@QAE@NHHHPAX@Z			; Telegram::Telegram
PUBLIC	??8@YA_NABUTelegram@@0@Z			; operator==
PUBLIC	??M@YA_NABUTelegram@@0@Z			; operator<
PUBLIC	?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
PUBLIC	??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
PUBLIC	??0?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Construct
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getpfirst
PUBLIC	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
PUBLIC	?_Orphan_all@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_all
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freeheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freenode0
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
PUBLIC	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
PUBLIC	??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
PUBLIC	?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear
PUBLIC	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node
PUBLIC	?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase
PUBLIC	?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr
PUBLIC	?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy
PUBLIC	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
PUBLIC	??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
PUBLIC	??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
PUBLIC	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge
PUBLIC	??0MessageDispatcher@@AAE@XZ			; MessageDispatcher::MessageDispatcher
PUBLIC	?Instance@MessageDispatcher@@SAPAV1@XZ		; MessageDispatcher::Instance
PUBLIC	?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z	; MessageDispatcher::DispatchMsg
PUBLIC	?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ ; MessageDispatcher::DispatchDelayedMessages
PUBLIC	??1MessageDispatcher@@QAE@XZ			; MessageDispatcher::~MessageDispatcher
PUBLIC	?GetCurrentFrame@FrameCounter@@QAEJXZ		; FrameCounter::GetCurrentFrame
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
PUBLIC	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
PUBLIC	?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ; std::pointer_traits<Telegram const *>::pointer_to
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
PUBLIC	??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ; std::addressof<Telegram const >
PUBLIC	??$swap@DX@std@@YAXAAD0@Z			; std::swap<char,void>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
PUBLIC	??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$_Get_size_of_n@$0DA@@std@@YAII@Z		; std::_Get_size_of_n<48>
PUBLIC	??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>
PUBLIC	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$move@AAD@std@@YA$$QADAAD@Z			; std::move<char &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z ; std::forward<std::less<Telegram> const &>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>
PUBLIC	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
PUBLIC	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
PUBLIC	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
PUBLIC	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool,0>
PUBLIC	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool,0>
PUBLIC	??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>
PUBLIC	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>
PUBLIC	??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>
PUBLIC	??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
PUBLIC	??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@ ; `string'
PUBLIC	??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1EM@KEKCOCNI@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ ; `string'
PUBLIC	??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAs?$AAe?$AAt?$AA_?$AAt?$AAr?$AAa?$AAi@ ; `string'
PUBLIC	??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@ ; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1EK@BCPDGOMC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@ ; `string'
PUBLIC	??_C@_1JG@CMEBBEHE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC@ ; `string'
PUBLIC	??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@ ; `string'
PUBLIC	??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1EK@OIBHPACE@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@ ; `string'
PUBLIC	??_C@_1CG@LEJCKCBB@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_?$AAp?$AAr?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_fabs:PROC
EXTRN	__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Instance@FrameCounter@@SAPAV1@XZ:PROC		; FrameCounter::Instance
EXTRN	?Instance@EntityManager@@SAPAV1@XZ:PROC		; EntityManager::Instance
EXTRN	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z:PROC ; EntityManager::GetEntityFromID
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?MaxInt@@3HB DD	01H DUP (?)				; MaxInt
	ALIGN	8

?MaxDouble@@3NB DQ 01H DUP (?)				; MaxDouble
?MinDouble@@3NB DQ 01H DUP (?)				; MinDouble
?MaxFloat@@3MB DD 01H DUP (?)				; MaxFloat
?MinFloat@@3MB DD 01H DUP (?)				; MinFloat
_BSS	ENDS
;	COMDAT ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
_BSS	SEGMENT
?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A DB 0cH DUP (?) ; `MessageDispatcher::Instance'::`2'::instance
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',MessageDispatcher::stance,MessageDispatcher * * const volatile,void,int, ?? &>
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
CRT$XCU	SEGMENT
?MaxInt$initializer$@@3P6AXXZA DD FLAT:??__EMaxInt@@YAXXZ ; MaxInt$initializer$
CRT$XCU	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_?$AAp?$AAr?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_?$AAp?$AAr?$AAe?$AAd?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, '_', 00H, 'l', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LEJCKCBB@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@LEJCKCBB@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OIBHPACE@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@
CONST	SEGMENT
??_C@_1EK@OIBHPACE@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '-', 00H, '-', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@CMEBBEHE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe@
CONST	SEGMENT
??_C@_1JG@CMEBBEHE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H
	DB	'a', 00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@BCPDGOMC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@
CONST	SEGMENT
??_C@_1EK@BCPDGOMC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, 's', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAs?$AAe?$AAt?$AA_?$AAt?$AAr?$AAa?$AAi@
CONST	SEGMENT
??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAs?$AAe?$AAt?$AA_?$AAt?$AAr?$AAa?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'T', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ',', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'e', 00H, 's'
	DB	00H, 's', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e'
	DB	00H, 'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, '>', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g'
	DB	00H, 'r', 00H, 'a', 00H, 'm', 00H, '>', 00H, ',', 00H, '0', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@KEKCOCNI@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc@
CONST	SEGMENT
??_C@_1EM@KEKCOCNI@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
CONST	SEGMENT
??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '6', 00H, '4', 00H
	DB	'2', 00H, '8', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '6', 00H, '4', 00H
	DB	'2', 00H, '8', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '6', 00H, '4', 00H
	DB	'2', 00H, '8', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$0
__unwindtable$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$2
__ehfuncinfo$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$0
__tryblocktable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z DD 00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$8
__unwindtable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$5
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$2
__ehfuncinfo$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Instance@MessageDispatcher@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Instance@MessageDispatcher@@SAPAV1@XZ$0
__ehfuncinfo$?Instance@MessageDispatcher@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Instance@MessageDispatcher@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z$0
__ehfuncinfo$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$3
__ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$1
__ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0
__unwindtable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2
__ehfuncinfo$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0
__unwindtable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$2
__ehfuncinfo$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ$0
__unwindtable$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MaxDouble$initializer$@@3P6AXXZA DD FLAT:??__EMaxDouble@@YAXXZ ; MaxDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinDouble$initializer$@@3P6AXXZA DD FLAT:??__EMinDouble@@YAXXZ ; MinDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MaxFloat$initializer$@@3P6AXXZA DD FLAT:??__EMaxFloat@@YAXXZ ; MaxFloat$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinFloat$initializer$@@3P6AXXZA DD FLAT:??__EMinFloat@@YAXXZ ; MinFloat$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@D@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@D@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>, COMDAT

; 918  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 919  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	ecx, 8
	mov	esi, eax
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd

; 920  : 			_Objty(_STD forward<_Types>(_Args)...);
; 921  : 		}

	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
_TEXT	SEGMENT
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>, COMDAT
; _this$ = ecx

; 1022 : 		{	// allocate a node with defaults and set links and value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1023 : 		_Nodeptr _Pnode = _Buynode0();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode0
	mov	DWORD PTR __Pnode$[ebp], eax

; 1024 : 
; 1025 : 		_Pnode->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 0

; 1026 : 		_Pnode->_Isnil = false;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+13], 0

; 1027 : 
; 1028 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1029 : 		_Alnode_traits::construct(_Getal(),

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Buynode
__catch$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$0:

; 1030 : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 1031 : 		_CATCH_ALL
; 1032 : 		_Freenode0(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freenode0

; 1033 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1034 : 		_CATCH_END

	mov	eax, $LN7@Buynode
	ret	0
$LN4@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$1
$LN7@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z$1:

; 1035 : 
; 1036 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:

; 1037 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val$ = 12						; size = 4
??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>, COMDAT
; _this$ = ecx

; 1627 : 		{	// node doesn't exist, make it

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1628 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@ABUTelegram@@@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>

; 1629 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\utility
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool,0>, COMDAT
; _this$ = ecx

; 203  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z

; 202  : 				second(_STD forward<_Other2>(_Val2))

	mov	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al

; 204  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\utility
;	COMDAT ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool,0>, COMDAT
; _this$ = ecx

; 203  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z

; 202  : 				second(_STD forward<_Other2>(_Val2))

	mov	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al

; 204  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
__Pnode$2 = -16						; size = 4
__Newnode$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 1
??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1856 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1857 : 		if (max_size() - 1 <= _My_data._Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
	sub	eax, 1
	mov	ecx, DWORD PTR __My_data$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN5@Insert_at

; 1858 : 			{	// tree would get too big, fail
; 1859 : 			_Destroy_if_node(_Node);

	movzx	edx, BYTE PTR __Node$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node

; 1860 : 			_Xlength_error("map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN5@Insert_at:

; 1861 : 			}
; 1862 : 
; 1863 : 		_Nodeptr _Newnode = _Buy_if_not_node(_Node, _STD forward<_Valty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>
	mov	DWORD PTR __Newnode$[ebp], eax

; 1864 : 
; 1865 : 		++_My_data._Mysize;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1866 : 		_Newnode->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1867 : 
; 1868 : 		if (_Wherenode == _My_data._Myhead)

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN6@Insert_at

; 1869 : 			{	// first node in tree, just set head values
; 1870 : 			_My_data._Root() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1871 : 			_My_data._Lmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx

; 1872 : 			_My_data._Rmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@Insert_at
$LN6@Insert_at:

; 1873 : 			}
; 1874 : 		else if (_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN8@Insert_at

; 1875 : 			{	// add to left of _Wherenode
; 1876 : 			_Wherenode->_Left = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1877 : 			if (_Wherenode == _My_data._Lmost())

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN10@Insert_at

; 1878 : 				{
; 1879 : 				_My_data._Lmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@Insert_at:

; 1880 : 				}
; 1881 : 			}
; 1882 : 		else

	jmp	SHORT $LN7@Insert_at
$LN8@Insert_at:

; 1883 : 			{	// add to right of _Wherenode
; 1884 : 			_Wherenode->_Right = _Newnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1885 : 			if (_Wherenode == _My_data._Rmost())

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN7@Insert_at

; 1886 : 				{
; 1887 : 				_My_data._Rmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
$LN7@Insert_at:

; 1888 : 				}
; 1889 : 			}
; 1890 : 
; 1891 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$2[ebp], eax
$LN4@Insert_at:
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	$LN3@Insert_at

; 1892 : 			{
; 1893 : 			if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	$LN12@Insert_at

; 1894 : 				{	// fixup red-red in left subtree
; 1895 : 				_Wherenode = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1896 : 				if (_Wherenode->_Color == this->_Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN14@Insert_at

; 1897 : 					{	// parent has two red children, blacken both
; 1898 : 					_Pnode->_Parent->_Color = this->_Black;

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 1899 : 					_Wherenode->_Color = this->_Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 1900 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 1901 : 					_Pnode = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$2[ebp], edx

; 1902 : 					}
; 1903 : 				else

	jmp	SHORT $LN15@Insert_at
$LN14@Insert_at:

; 1904 : 					{	// parent has red and black children
; 1905 : 					if (_Pnode == _Pnode->_Parent->_Right)

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$2[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN16@Insert_at

; 1906 : 						{	// rotate right child to left
; 1907 : 						_Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$2[ebp], ecx

; 1908 : 						_My_data._Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$2[ebp]
	push	edx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
$LN16@Insert_at:

; 1909 : 						}
; 1910 : 
; 1911 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 1912 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 1913 : 					_My_data._Rrotate(_Pnode->_Parent->_Parent);

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
$LN15@Insert_at:

; 1914 : 					}
; 1915 : 				}
; 1916 : 			else

	jmp	$LN13@Insert_at
$LN12@Insert_at:

; 1917 : 				{	// fixup red-red in right subtree
; 1918 : 				_Wherenode = _Pnode->_Parent->_Parent->_Left;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 1919 : 				if (_Wherenode->_Color == this->_Red)

	mov	eax, DWORD PTR __Wherenode$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN17@Insert_at

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					_Pnode->_Parent->_Color = this->_Black;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 1922 : 					_Wherenode->_Color = this->_Black;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [ecx+12], 1

; 1923 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 1924 : 					_Pnode = _Pnode->_Parent->_Parent;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$2[ebp], ecx

; 1925 : 					}
; 1926 : 				else

	jmp	SHORT $LN13@Insert_at
$LN17@Insert_at:

; 1927 : 					{	// parent has red and black children
; 1928 : 					if (_Pnode == _Pnode->_Parent->_Left)

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN19@Insert_at

; 1929 : 						{	// rotate left child to right
; 1930 : 						_Pnode = _Pnode->_Parent;

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$2[ebp], eax

; 1931 : 						_My_data._Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
$LN19@Insert_at:

; 1932 : 						}
; 1933 : 
; 1934 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

	mov	edx, DWORD PTR __Pnode$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 1935 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 1936 : 					_My_data._Lrotate(_Pnode->_Parent->_Parent);

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
$LN13@Insert_at:

; 1937 : 					}
; 1938 : 				}
; 1939 : 			}

	jmp	$LN4@Insert_at
$LN3@Insert_at:

; 1940 : 
; 1941 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+12], 1

; 1942 : 		return (iterator(_Newnode, _STD addressof(_My_data)));

	mov	edx, DWORD PTR __My_data$[ebp]
	push	edx
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN20@Insert_at:

; 1943 : 		}

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z PROC ; std::forward<Telegram const &>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ENDP ; std::forward<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z
_TEXT	SEGMENT
tv85 = -2						; size = 1
tv82 = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>, COMDAT

; 1079 : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1080 : 	return (_Pred(_Left, _Right)

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Debug_lt_p
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@Debug_lt_p
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@LEJCKCBB@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1082					; 0000043aH
	push	OFFSET ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_?$AAp?$AAr?$AAe?$AAd?$AA?$AA@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv82[ebp], 1
	jmp	SHORT $LN4@Debug_lt_p
$LN3@Debug_lt_p:
	mov	BYTE PTR tv82[ebp], 1
$LN4@Debug_lt_p:
	mov	dl, BYTE PTR tv82[ebp]
	mov	BYTE PTR tv85[ebp], dl
	jmp	SHORT $LN6@Debug_lt_p
$LN5@Debug_lt_p:
	mov	BYTE PTR tv85[ebp], 0
$LN6@Debug_lt_p:
	mov	al, BYTE PTR tv85[ebp]

; 1081 : 		? (_Pred(_Right, _Left)
; 1082 : 			? (_DEBUG_ERROR2("invalid comparator", _File, _Line), true)
; 1083 : 			: true)
; 1084 : 		: false);
; 1085 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 299  : 	__PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 1674 : 	__PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<Telegram,void *> * &>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>, COMDAT
; _this$ = ecx

; 315  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >

; 316  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z PROC ; std::forward<std::less<Telegram> const &>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z ENDP ; std::forward<std::less<Telegram> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1540 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1541 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1542 : 	}

	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 94   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 95   : 	size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 96   : 	if (_Block_size <= _Bytes)

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN2@Allocate_m

; 97   : 		{	// add overflow, try allocating all of memory and assume the
; 98   : 			// allocation function will throw bad_alloc
; 99   : 		_Block_size = static_cast<size_t>(-1);

	mov	DWORD PTR __Block_size$[ebp], -1
$LN2@Allocate_m:

; 100  : 		}
; 101  : 
; 102  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax

; 103  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);	// validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	jne	SHORT $LN3@Allocate_m
	mov	eax, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
	test	eax, eax
	je	SHORT $LN5@Allocate_m
	xor	ecx, ecx
	jne	SHORT $LN6@Allocate_m
$LN5@Allocate_m:
	push	OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
	push	OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
	push	0
	push	103					; 00000067H
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	__CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN6@Allocate_m
	int	3
$LN6@Allocate_m:
	push	0
	push	103					; 00000067H
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Allocate_m:

; 104  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 105  : 		& ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 106  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 107  : 
; 108  :   #ifdef _DEBUG
; 109  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 110  :   #endif /* _DEBUG */
; 111  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 112  : 	}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT

; 1555 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1556 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1557 : 	}

	pop	ebp
	ret	0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>, COMDAT

; 925  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 926  : 		_Ptr->~_Uty();
; 927  : 		}

	pop	ebp
	ret	0
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
_TEXT	SEGMENT
tv273 = -200						; size = 4
tv286 = -193						; size = 1
tv285 = -192						; size = 4
tv284 = -188						; size = 4
tv269 = -184						; size = 4
tv283 = -177						; size = 1
tv267 = -176						; size = 4
tv282 = -172						; size = 4
tv281 = -168						; size = 4
tv260 = -164						; size = 4
tv153 = -160						; size = 4
tv280 = -153						; size = 1
tv279 = -152						; size = 4
tv156 = -148						; size = 4
tv129 = -144						; size = 4
tv191 = -137						; size = 1
tv233 = -136						; size = 4
tv251 = -132						; size = 4
$T2 = -128						; size = 4
$T3 = -121						; size = 1
$T4 = -120						; size = 12
$T5 = -105						; size = 1
$T6 = -104						; size = 12
$T7 = -89						; size = 1
$T8 = -88						; size = 12
$T9 = -73						; size = 1
$T10 = -72						; size = 12
$T11 = -57						; size = 1
__Where$12 = -52					; size = 12
__Addleft$13 = -33					; size = 1
__Trynode$14 = -32					; size = 4
__Wherenode$15 = -28					; size = 4
__My_data$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 1
??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>, COMDAT
; _this$ = ecx

; 1783 : 		{	// try to insert node, on left if _Leftish

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 184				; 000000b8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 1784 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1785 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1786 : 		_Nodeptr _Wherenode = _My_data._Myhead;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$15[ebp], ecx

; 1787 : 		_Nodeptr _Trynode = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Wherenode$15[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Trynode$14[ebp], eax

; 1788 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$13[ebp], 1
$LN2@Insert_noh:

; 1789 : 
; 1790 : 		while (!_Trynode->_Isnil)

	mov	ecx, DWORD PTR __Trynode$14[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	$LN3@Insert_noh

; 1791 : 			{	// look for leaf to insert before (_Addleft) or after
; 1792 : 			_Wherenode = _Trynode;

	mov	eax, DWORD PTR __Trynode$14[ebp]
	mov	DWORD PTR __Wherenode$15[ebp], eax

; 1793 : 			if (_Leftish)

	movzx	ecx, BYTE PTR __Leftish$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@Insert_noh

; 1794 : 				{
; 1795 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv251[ebp], eax
	mov	eax, DWORD PTR __Trynode$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv233[ebp], eax
	push	1797					; 00000705H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR tv251[ebp]
	push	ecx
	mov	edx, DWORD PTR tv233[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv191[ebp], al
	movzx	eax, BYTE PTR tv191[ebp]
	test	eax, eax
	jne	SHORT $LN16@Insert_noh
	mov	DWORD PTR tv129[ebp], 1
	jmp	SHORT $LN17@Insert_noh
$LN16@Insert_noh:
	mov	DWORD PTR tv129[ebp], 0
$LN17@Insert_noh:
	mov	cl, BYTE PTR tv129[ebp]
	mov	BYTE PTR __Addleft$13[ebp], cl

; 1796 : 					this->_Key(_Trynode),
; 1797 : 					this->_Kfn(_Val));	// favor left end
; 1798 : 				}
; 1799 : 			else

	jmp	SHORT $LN6@Insert_noh
$LN5@Insert_noh:

; 1800 : 				{
; 1801 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

	mov	edx, DWORD PTR __Trynode$14[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv156[ebp], eax
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv279[ebp], eax
	push	1803					; 0000070bH
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	ecx, DWORD PTR tv156[ebp]
	push	ecx
	mov	edx, DWORD PTR tv279[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv280[ebp], al
	mov	al, BYTE PTR tv280[ebp]
	mov	BYTE PTR __Addleft$13[ebp], al
$LN6@Insert_noh:

; 1802 : 					this->_Kfn(_Val),
; 1803 : 					this->_Key(_Trynode));	// favor right end
; 1804 : 				}
; 1805 : 
; 1806 : 			_Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;

	movzx	ecx, BYTE PTR __Addleft$13[ebp]
	test	ecx, ecx
	je	SHORT $LN18@Insert_noh
	mov	edx, DWORD PTR __Trynode$14[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN19@Insert_noh
$LN18@Insert_noh:
	mov	ecx, DWORD PTR __Trynode$14[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv153[ebp], edx
$LN19@Insert_noh:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR __Trynode$14[ebp], eax

; 1807 : 			}

	jmp	$LN2@Insert_noh
$LN3@Insert_noh:

; 1808 : 
; 1809 : #pragma warning(push)
; 1810 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1811 : 		if (this->_Multi)

	xor	ecx, ecx
	je	SHORT $LN7@Insert_noh

; 1812 : 			{
; 1813 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	BYTE PTR $T11[ebp], 1
	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Wherenode$15[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Addleft$13[ebp]
	push	edx
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
	mov	DWORD PTR tv260[ebp], eax
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	mov	edx, DWORD PTR tv260[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool,0>
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T10[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN15@Insert_noh

; 1814 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1815 : 			}
; 1816 : 		else

	jmp	$LN8@Insert_noh
$LN7@Insert_noh:

; 1817 : 			{	// insert only if unique
; 1818 : 			iterator _Where = iterator(_Wherenode, _STD addressof(_My_data));

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Wherenode$15[ebp]
	push	edx
	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	DWORD PTR tv281[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1819 : 			if (!_Addleft)

	movzx	eax, BYTE PTR __Addleft$13[ebp]
	test	eax, eax
	jne	SHORT $LN9@Insert_noh
	jmp	$LN10@Insert_noh
$LN9@Insert_noh:

; 1820 : 				{	// need to test if insert after is okay
; 1821 : 				}
; 1822 : 			else if (_Where == begin())

	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv282[ebp], eax
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR tv267[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	eax, DWORD PTR tv267[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	mov	BYTE PTR tv283[ebp], al
	mov	cl, BYTE PTR tv283[ebp]
	mov	BYTE PTR $T9[ebp], cl
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T9[ebp]
	test	edx, edx
	je	SHORT $LN11@Insert_noh

; 1823 : 				{
; 1824 : 				return (_Pairib(_Insert_at(true, _Wherenode,

	mov	BYTE PTR $T7[ebp], 1
	movzx	eax, BYTE PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Wherenode$15[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
	mov	DWORD PTR tv269[ebp], eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	edx, DWORD PTR tv269[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool,0>
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN15@Insert_noh

; 1825 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1826 : 				}
; 1827 : 			else

	jmp	SHORT $LN10@Insert_noh
$LN11@Insert_noh:

; 1828 : 				{
; 1829 : 				--_Where;	// need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--
$LN10@Insert_noh:

; 1830 : 				}
; 1831 : 
; 1832 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv284[ebp], eax
	mov	edx, DWORD PTR __Where$12[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv285[ebp], eax
	push	1834					; 0000072aH
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR tv284[ebp]
	push	eax
	mov	ecx, DWORD PTR tv285[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1PB_WI@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
	add	esp, 20					; 00000014H
	mov	BYTE PTR tv286[ebp], al
	movzx	edx, BYTE PTR tv286[ebp]
	test	edx, edx
	je	SHORT $LN13@Insert_noh

; 1833 : 				this->_Key(_Where._Ptr),
; 1834 : 				this->_Kfn(_Val)))
; 1835 : 				{
; 1836 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	BYTE PTR $T5[ebp], 1
	movzx	eax, BYTE PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Wherenode$15[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$13[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@_NPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
	mov	DWORD PTR tv273[ebp], eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	eax, DWORD PTR tv273[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool,0>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN15@Insert_noh

; 1837 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1838 : 				}
; 1839 : 			else

	jmp	SHORT $LN14@Insert_noh
$LN13@Insert_noh:

; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_node(_Newnode);

	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node

; 1842 : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T3[ebp], 0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$12[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > &,bool,0>
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN15@Insert_noh
$LN14@Insert_noh:

; 1843 : 				}
; 1844 : 			}

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR __Where$12[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN8@Insert_noh:
	jmp	SHORT $LN20@Insert_noh
__catch$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$0:

; 1845 : #pragma warning(pop)
; 1846 : 		_CATCH_ALL
; 1847 : 		_Destroy_if_node(_Newnode);

	movzx	eax, BYTE PTR __Newnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node

; 1848 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1849 : 		_CATCH_END

	mov	eax, $LN30@Insert_noh
	ret	0
$LN20@Insert_noh:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN15@Insert_noh
$LN30@Insert_noh:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN15@Insert_noh:

; 1850 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@Insert_noh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN34@Insert_noh:
	DD	1
	DD	$LN33@Insert_noh
$LN33@Insert_noh:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN31@Insert_noh
$LN31@Insert_noh:
	DB	95					; 0000005fH
	DB	87					; 00000057H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$4:
	lea	ecx, DWORD PTR __Where$12[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$5:
	lea	ecx, DWORD PTR $T8[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0DA@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0DA@@std@@YAII@Z PROC		; std::_Get_size_of_n<48>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 89478485 ; 05555555H

; 25   : 	size_t _Result = _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 48
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 89478485	; 05555555H
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0DA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<48>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>, COMDAT

; 918  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 919  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 920  : 			_Objty(_STD forward<_Types>(_Args)...);
; 921  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<Telegram,void *> *>, COMDAT

; 372  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 373  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 374  : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 324  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z ; std::forward<std::less<Telegram> const &>
	add	esp, 4

; 323  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _<_Val2_0>$[ebp]
	push	ecx
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
	add	esp, 4
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>

; 325  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >, COMDAT
; _this$ = ecx

; 1025 : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1026 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 918  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 919  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 920  : 			_Objty(_STD forward<_Types>(_Args)...);
; 921  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 388  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 389  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 390  : 	}

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1306 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

	push	ebp
	mov	ebp, esp

; 1307 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1308 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 925  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 926  : 		_Ptr->~_Uty();
; 927  : 		}

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 910  : 		{	// deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 911  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 912  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 913  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 1035 : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1036 : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 1037 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 210  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 211  :  #if defined(_M_IX86) || defined(_M_X64)
; 212  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 213  : 		{	// boost the alignment of big allocations to help autovectorization
; 214  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 215  : 		}
; 216  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 217  : 
; 218  : 	::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 219  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 191  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 192  :  #if defined(_M_IX86) || defined(_M_X64)
; 193  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 194  : 		{	// boost the alignment of big allocations to help autovectorization
; 195  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 196  : 		}
; 197  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 198  : 
; 199  : 	if (_Bytes != 0)

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 200  : 		{
; 201  : 		return (_Traits::_Allocate(_Bytes));

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 202  : 		}
; 203  : 
; 204  : 	return (nullptr);

	xor	eax, eax
$LN1@Allocate:

; 205  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\utility
;	COMDAT ??$swap@DX@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@DX@std@@YAXAAD0@Z PROC				; std::swap<char,void>, COMDAT

; 66   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 67   : 	_Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAD@std@@YA$$QADAAD@Z		; std::move<char &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR __Tmp$[ebp], cl

; 68   : 	_Left = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAD@std@@YA$$QADAAD@Z		; std::move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 69   : 	_Right = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAD@std@@YA$$QADAAD@Z		; std::move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 70   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@DX@std@@YAXAAD0@Z ENDP				; std::swap<char,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z PROC ; std::addressof<Telegram const >, COMDAT

; 372  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 373  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 374  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ENDP ; std::addressof<Telegram const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Node_alloc$ = -17					; size = 1
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT

; 450  : 			{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 451  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 452  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 453  : 			_Alnode _Node_alloc(_Al);
; 454  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Node_alloc$[ebp]
	push	ecx
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 455  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));

	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR __Node_alloc$[ebp]
	push	eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 456  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));

	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 8
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __Node_alloc$[ebp]
	push	edx
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 457  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Node_alloc$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 458  : 			}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Freenode0
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@Freenode0:
	DD	1
	DD	$LN5@Freenode0
$LN5@Freenode0:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Freenode0
$LN3@Freenode0:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>, COMDAT

; 925  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 926  : 		_Ptr->~_Uty();
; 927  : 		}

	pop	ebp
	ret	0
??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z PROC ; std::addressof<Telegram>, COMDAT

; 372  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 373  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 374  : 	}

	pop	ebp
	ret	0
??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ENDP ; std::addressof<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT

; 372  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 373  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 374  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z PROC ; std::pointer_traits<Telegram const *>::pointer_to, COMDAT

; 352  : 		{	// convert raw reference to pointer

	push	ebp
	mov	ebp, esp

; 353  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ; std::addressof<Telegram const >
	add	esp, 4

; 354  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ENDP ; std::pointer_traits<Telegram const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=, COMDAT
; _this$ = ecx

; 314  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 316  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv128 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 300  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 301  : 		if (this->_Getcont() != _Right._Getcont())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	je	SHORT $LN2@operator

; 302  : 			{	// report error
; 303  : 			_DEBUG_ERROR("map/set iterators incompatible");

	push	303					; 0000012fH
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DO@CFEEPGGJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	303					; 0000012fH
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OA@LGDDNOIK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 304  : 			}
; 305  : 
; 306  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 307  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 308  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 309  : 
; 310  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN4@operator
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv128[ebp], 0
$LN5@operator:
	mov	al, BYTE PTR tv128[ebp]

; 311  : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Ptrsav$ = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--, COMDAT
; _this$ = ecx

; 262  : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 263  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 264  : 		if (this->_Getcont() == 0
; 265  : 			|| this->_Ptr == nullptr)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@operator
$LN3@operator:

; 266  : 			{	// report error
; 267  : 			_DEBUG_ERROR("map/set iterator not decrementable");

	push	267					; 0000010bH
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	267					; 0000010bH
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1EK@OIBHPACE@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 268  : 			}
; 269  : 
; 270  : 		_Nodeptr _Ptrsav = this->_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Ptrsav$[ebp], edx

; 271  : 		--static_cast<_Mybase&>(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--

; 272  : 		if (_Ptrsav == this->_Ptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptrsav$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN4@operator

; 273  : 			{	// report error
; 274  : 			_DEBUG_ERROR("map/set iterator not decrementable");

	push	274					; 00000112H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@OKCGOALM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	274					; 00000112H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OA@OFPMILIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1EK@OIBHPACE@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN4@operator:

; 275  : 			}
; 276  : 
; 277  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 278  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr);
; 279  : 
; 280  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 281  : 		--static_cast<_Mybase&>(*this);
; 282  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 283  : 
; 284  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 285  : 		--static_cast<_Mybase&>(*this);
; 286  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 287  : 
; 288  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 289  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Tmp$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++, COMDAT
; _this$ = ecx

; 255  : 		{	// postincrement

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 256  : 		_Tree_const_iterator _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 257  : 		++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++

; 258  : 		return (_Tmp);

	lea	ecx, DWORD PTR __Tmp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 259  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++, COMDAT
; _this$ = ecx

; 236  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Ptr == nullptr
; 240  : 			|| this->_Ptr->_Isnil)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN2@operator
$LN3@operator:

; 241  : 			{	// report error
; 242  : 			_DEBUG_ERROR("map/set iterator not incrementable");

	push	242					; 000000f2H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EG@EHJFMBHJ@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	242					; 000000f2H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1OA@BGMODHEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1EK@BCPDGOMC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 243  : 			}
; 244  : 
; 245  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 246  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr);
; 247  : 		_SCL_SECURE_VALIDATE_RANGE(!this->_Ptr->_Isnil);
; 248  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 249  : 
; 250  : 		++static_cast<_Mybase&>(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++

; 251  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 252  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->, COMDAT
; _this$ = ecx

; 231  : 		{	// return pointer to class object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		return (pointer_traits<pointer>::pointer_to(**this));

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ; std::pointer_traits<Telegram const *>::pointer_to
	add	esp, 4

; 233  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*, COMDAT
; _this$ = ecx

; 210  : 		{	// return designated value

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 211  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 212  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax

; 213  : 		if (_Mycont == 0
; 214  : 			|| this->_Ptr == nullptr
; 215  : 			|| this->_Ptr == _Mycont->_Myhead)

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN2@operator
$LN3@operator:

; 216  : 			{	// report error
; 217  : 			_DEBUG_ERROR("map/set iterator not dereferencable");

	push	217					; 000000d9H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EI@FHEHNNNM@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	217					; 000000d9H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
	push	OFFSET ??_C@_1EM@KEKCOCNI@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@operator:

; 218  : 			}
; 219  : 
; 220  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 221  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr);
; 222  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 223  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 224  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 226  : 
; 227  : 		return (this->_Ptr->_Myval);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, 16					; 00000010H

; 228  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx

; 204  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		: _Mybase(_Pnode, _Plist)

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>

; 205  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--, COMDAT
; _this$ = ecx

; 82   : 		{	// predecrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 		if (_Ptr->_Isnil)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN4@operator

; 84   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN5@operator
$LN4@operator:

; 85   : 		else if (!_Ptr->_Left->_Isnil)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@operator

; 86   : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 87   : 		else

	jmp	SHORT $LN5@operator
$LN2@operator:

; 88   : 			{	// climb looking for left subtree
; 89   : 			_Nodeptr _Pnode;
; 90   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil
; 91   : 				&& _Ptr == _Pnode->_Left)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$1[ebp], edx
	mov	eax, DWORD PTR __Pnode$1[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@operator

; 92   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN2@operator
$LN3@operator:

; 93   : 			if (_Ptr->_Isnil)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN8@operator

; 94   : 				;	// begin() shouldn't be decremented, don't move
; 95   : 			else

	jmp	SHORT $LN5@operator
$LN8@operator:

; 96   : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN5@operator:

; 97   : 			}
; 98   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 99   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if (_Ptr->_Isnil)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN4@operator
	jmp	SHORT $LN5@operator
$LN4@operator:

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Ptr->_Right->_Isnil)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	jne	SHORT $LN2@operator

; 62   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 63   : 		else

	jmp	SHORT $LN5@operator
$LN2@operator:

; 64   : 			{	// climb looking for right subtree
; 65   : 			_Nodeptr _Pnode;
; 66   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil
; 67   : 				&& _Ptr == _Pnode->_Right)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$1[ebp], ecx
	mov	edx, DWORD PTR __Pnode$1[ebp]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator

; 68   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN2@operator
$LN3@operator:

; 69   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN5@operator:

; 70   : 			}
; 71   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 72   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 42   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 44   : 		this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 45   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -5						; size = 1
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1347 : 		{	// try to insert node with value _Val, favoring right side

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1348 : 		return (_Insert_nohint(false, _Val, _Not_a_node_tag()));

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1349 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ
text$yd	SEGMENT
??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ PROC ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
	call	??1MessageDispatcher@@QAE@XZ
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ ENDP ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\framecounter.h
;	COMDAT ?GetCurrentFrame@FrameCounter@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentFrame@FrameCounter@@QAEJXZ PROC		; FrameCounter::GetCurrentFrame, COMDAT
; _this$ = ecx

; 27   :   long GetCurrentFrame(){return m_lCount;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentFrame@FrameCounter@@QAEJXZ ENDP		; FrameCounter::GetCurrentFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$di	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR ?MinFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$di	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR ?MaxFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$di	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR ?MinDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$di	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR ?MaxDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$di	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR ?MaxInt@@3HB, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1MessageDispatcher@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MessageDispatcher@@QAE@XZ PROC			; MessageDispatcher::~MessageDispatcher, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1MessageDispatcher@@QAE@XZ ENDP			; MessageDispatcher::~MessageDispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.cpp
;	COMDAT ?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
_TEXT	SEGMENT
tv207 = -124						; size = 4
tv204 = -120						; size = 4
tv217 = -116						; size = 4
tv137 = -112						; size = 4
tv198 = -108						; size = 4
tv213 = -104						; size = 4
tv193 = -100						; size = 4
tv209 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 12
$T4 = -76						; size = 4
$T5 = -72						; size = 12
$T6 = -60						; size = 12
$T7 = -48						; size = 12
$T8 = -33						; size = 1
_pReceiver$9 = -32					; size = 4
_telegram$10 = -28					; size = 4
_CurrentTime$ = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ PROC	; MessageDispatcher::DispatchDelayedMessages, COMDAT
; _this$ = ecx

; 104  : { 

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 105  :   //first get current time
; 106  :   double CurrentTime = TickCounter->GetCurrentFrame(); 

	call	?Instance@FrameCounter@@SAPAV1@XZ	; FrameCounter::Instance
	mov	ecx, eax
	call	?GetCurrentFrame@FrameCounter@@QAEJXZ	; FrameCounter::GetCurrentFrame
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _CurrentTime$[ebp], xmm0
$LN2@DispatchDe:

; 107  : 
; 108  :   //now peek at the queue to see if any telegrams need dispatching.
; 109  :   //remove all telegrams from the front of the queue that have gone
; 110  :   //past their sell by date
; 111  :   while( !PriorityQ.empty() &&
; 112  : 	     (PriorityQ.begin()->DispatchTime < CurrentTime) && 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@DispatchDe
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv209[ebp], eax
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR tv193[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv193[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
	movsd	xmm0, QWORD PTR _CurrentTime$[ebp]
	comisd	xmm0, QWORD PTR [eax+16]
	jbe	SHORT $LN5@DispatchDe
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv213[ebp], eax
	mov	edx, DWORD PTR tv213[ebp]
	mov	DWORD PTR tv198[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 2
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv198[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@DispatchDe
	mov	DWORD PTR tv137[ebp], 1
	jmp	SHORT $LN6@DispatchDe
$LN5@DispatchDe:
	mov	DWORD PTR tv137[ebp], 0
$LN6@DispatchDe:
	mov	cl, BYTE PTR tv137[ebp]
	mov	BYTE PTR $T8[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T2[ebp]
	and	edx, 2
	je	SHORT $LN11@DispatchDe
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN11@DispatchDe:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	SHORT $LN12@DispatchDe
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN12@DispatchDe:
	movzx	ecx, BYTE PTR $T8[ebp]
	test	ecx, ecx
	je	$LN3@DispatchDe

; 113  :          (PriorityQ.begin()->DispatchTime > 0) )
; 114  :   {
; 115  :     //read the telegram from the front of the queue
; 116  :     const Telegram& telegram = *PriorityQ.begin();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv217[ebp], eax
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv204[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv204[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
	mov	DWORD PTR _telegram$10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 117  : 
; 118  :     //find the recipient
; 119  :     BaseGameEntity* pReceiver = EntityMgr->GetEntityFromID(telegram.Receiver);

	mov	ecx, DWORD PTR _telegram$10[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?Instance@EntityManager@@SAPAV1@XZ	; EntityManager::Instance
	mov	ecx, eax
	call	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z ; EntityManager::GetEntityFromID
	mov	DWORD PTR _pReceiver$9[ebp], eax

; 120  : 
; 121  :     #ifdef SHOW_MESSAGING_INFO
; 122  :     debug_con << "\nQueued telegram ready for dispatch: Sent to " 
; 123  :          << pReceiver->ID() << ". Msg is "<< telegram.Msg << "";
; 124  :     #endif
; 125  : 
; 126  :     //send the telegram to the recipient
; 127  :     Discharge(pReceiver, telegram);

	mov	eax, DWORD PTR _telegram$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceiver$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge

; 128  : 
; 129  : 	//remove it from the queue
; 130  :     PriorityQ.erase(PriorityQ.begin());

	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv207[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 131  :   }

	jmp	$LN2@DispatchDe
$LN3@DispatchDe:

; 132  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN8@DispatchDe
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN8@DispatchDe:
	ret	0
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 2
	je	$LN10@DispatchDe
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN10@DispatchDe:
	ret	0
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ ENDP	; MessageDispatcher::DispatchDelayedMessages
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.cpp
;	COMDAT ?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z
_TEXT	SEGMENT
$T1 = -72						; size = 16
_CurrentTime$2 = -56					; size = 8
_telegram$ = -44					; size = 32
_pReceiver$ = -8					; size = 4
_this$ = -4						; size = 4
_delay$ = 8						; size = 8
_sender$ = 16						; size = 4
_receiver$ = 20						; size = 4
_msg$ = 24						; size = 4
_AdditionalInfo$ = 28					; size = 4
?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z PROC	; MessageDispatcher::DispatchMsg, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 
; 51   :   //get a pointer to the receiver
; 52   :   BaseGameEntity* pReceiver = EntityMgr->GetEntityFromID(receiver);

	mov	eax, DWORD PTR _receiver$[ebp]
	push	eax
	call	?Instance@EntityManager@@SAPAV1@XZ	; EntityManager::Instance
	mov	ecx, eax
	call	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z ; EntityManager::GetEntityFromID
	mov	DWORD PTR _pReceiver$[ebp], eax

; 53   : 
; 54   :   //make sure the receiver is valid
; 55   :   if (pReceiver == NULL)

	cmp	DWORD PTR _pReceiver$[ebp], 0
	jne	SHORT $LN2@DispatchMs

; 56   :   {
; 57   :     #ifdef SHOW_MESSAGING_INFO
; 58   :     debug_con << "\nWarning! No Receiver with ID of " << receiver << " found" << "";
; 59   :     #endif
; 60   : 
; 61   :     return;

	jmp	SHORT $LN1@DispatchMs
$LN2@DispatchMs:

; 62   :   }
; 63   :   
; 64   :   //create the telegram
; 65   :   Telegram telegram(0, sender, receiver, msg, AdditionalInfo);

	mov	ecx, DWORD PTR _AdditionalInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _receiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sender$[ebp]
	push	ecx
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _telegram$[ebp]
	call	??0Telegram@@QAE@NHHHPAX@Z		; Telegram::Telegram

; 66   :   
; 67   :   //if there is no delay, route telegram immediately                       
; 68   :   if (delay <= 0.0)                                                        

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _delay$[ebp]
	jb	SHORT $LN3@DispatchMs

; 69   :   {
; 70   :     #ifdef SHOW_MESSAGING_INFO
; 71   :     debug_con << "\nTelegram dispatched at time: " << TickCounter->GetCurrentFrame()
; 72   :          << " by " << sender << " for " << receiver 
; 73   :          << ". Msg is " << msg << "";
; 74   :     #endif
; 75   : 
; 76   :     //send the telegram to the recipient
; 77   :     Discharge(pReceiver, telegram);

	lea	edx, DWORD PTR _telegram$[ebp]
	push	edx
	mov	eax, DWORD PTR _pReceiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge

; 78   :   }
; 79   : 
; 80   :   //else calculate the time when the telegram should be dispatched
; 81   :   else

	jmp	SHORT $LN4@DispatchMs
$LN3@DispatchMs:

; 82   :   {
; 83   :     double CurrentTime = TickCounter->GetCurrentFrame(); 

	call	?Instance@FrameCounter@@SAPAV1@XZ	; FrameCounter::Instance
	mov	ecx, eax
	call	?GetCurrentFrame@FrameCounter@@QAEJXZ	; FrameCounter::GetCurrentFrame
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _CurrentTime$2[ebp], xmm0

; 84   : 
; 85   :     telegram.DispatchTime = CurrentTime + delay;

	movsd	xmm0, QWORD PTR _CurrentTime$2[ebp]
	addsd	xmm0, QWORD PTR _delay$[ebp]
	movsd	QWORD PTR _telegram$[ebp+16], xmm0

; 86   : 
; 87   :     //and put it in the queue
; 88   :     PriorityQ.insert(telegram);   

	lea	ecx, DWORD PTR _telegram$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
$LN4@DispatchMs:
$LN1@DispatchMs:

; 89   : 
; 90   :     #ifdef SHOW_MESSAGING_INFO
; 91   :     debug_con << "\nDelayed telegram from " << sender << " recorded at time " 
; 92   :             << TickCounter->GetCurrentFrame() << " for " << receiver
; 93   :             << ". Msg is " << msg << "";
; 94   :     #endif
; 95   :   }
; 96   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DispatchMs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN9@DispatchMs:
	DD	1
	DD	$LN8@DispatchMs
$LN8@DispatchMs:
	DD	-44					; ffffffd4H
	DD	32					; 00000020H
	DD	$LN7@DispatchMs
$LN7@DispatchMs:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z ENDP	; MessageDispatcher::DispatchMsg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.cpp
;	COMDAT ?Instance@MessageDispatcher@@SAPAV1@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Instance@MessageDispatcher@@SAPAV1@XZ PROC		; MessageDispatcher::Instance, COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Instance@MessageDispatcher@@SAPAV1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 18   :   static MessageDispatcher instance; 

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@Instance
	push	OFFSET ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA, -1
	jne	SHORT $LN2@Instance
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
	call	??0MessageDispatcher@@AAE@XZ		; MessageDispatcher::MessageDispatcher
	push	OFFSET ??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 4
$LN2@Instance:

; 19   :   
; 20   :   return &instance;

	mov	eax, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A

; 21   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Instance@MessageDispatcher@@SAPAV1@XZ$0:
	push	OFFSET ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	call	__Init_thread_abort
	pop	ecx
	ret	0
__ehhandler$?Instance@MessageDispatcher@@SAPAV1@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Instance@MessageDispatcher@@SAPAV1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Instance@MessageDispatcher@@SAPAV1@XZ ENDP		; MessageDispatcher::Instance
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.h
;	COMDAT ??0MessageDispatcher@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MessageDispatcher@@AAE@XZ PROC			; MessageDispatcher::MessageDispatcher, COMDAT
; _this$ = ecx

; 47   :   MessageDispatcher(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0MessageDispatcher@@AAE@XZ ENDP			; MessageDispatcher::MessageDispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.cpp
;	COMDAT ?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pReceiver$ = 8						; size = 4
_telegram$ = 12						; size = 4
?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z PROC ; MessageDispatcher::Discharge, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 29   :   if (!pReceiver->HandleMessage(telegram))

	mov	esi, esp
	mov	eax, DWORD PTR _telegram$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceiver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pReceiver$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   :   {
; 31   :     //telegram could not be handled
; 32   :     #ifdef SHOW_MESSAGING_INFO
; 33   :     debug_con << "Message not handled" << "";
; 34   :     #endif
; 35   :   }
; 36   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ENDP ; MessageDispatcher::Discharge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\set
;	COMDAT ??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >, COMDAT
; _this$ = ecx

; 86   : 		{	// construct empty set from defaults

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 		: _Mybase(key_compare())

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >

; 87   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key, COMDAT
; _this$ = ecx

; 2172 : 		{	// return reference to key in node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2173 : 		return (this->_Kfn(_Pnode->_Myval));

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn

; 2174 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2167 : 		{	// get key from value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2168 : 		return (_Traits::_Kfn(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
	add	esp, 4

; 2169 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
tv129 = -28						; size = 4
$T1 = -24						; size = 12
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2162 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2163 : 		erase(begin(), end());

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T3[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv129[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 2164 : 		}

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 2139 : 		{	// orphan iterators with specified node pointers

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2140 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2141 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 2142 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ptr
$LN2@Orphan_ptr:

; 2143 : 			{
; 2144 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ptr

; 2145 : 				{
; 2146 : 				if ((*_Pnext)->_Ptr == this->_Get_data()._Myhead
; 2147 : 					|| (_Ptr != nullptr && (*_Pnext)->_Ptr != _Ptr))

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	edx, DWORD PTR [esi+8]
	cmp	edx, DWORD PTR [eax+4]
	je	SHORT $LN7@Orphan_ptr
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN5@Orphan_ptr
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Ptr$[ebp]
	je	SHORT $LN5@Orphan_ptr
$LN7@Orphan_ptr:

; 2148 : 					{
; 2149 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 2150 : 					}
; 2151 : 				else

	jmp	SHORT $LN6@Orphan_ptr
$LN5@Orphan_ptr:

; 2152 : 					{	// orphan the iterator
; 2153 : 					(*_Pnext)->_Clrcont();

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 2154 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ptr:

; 2155 : 					}
; 2156 : 				}

	jmp	SHORT $LN2@Orphan_ptr
$LN4@Orphan_ptr:

; 2157 : 			}
; 2158 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ptr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN13@Orphan_ptr:
	DD	1
	DD	$LN12@Orphan_ptr
$LN12@Orphan_ptr:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ptr
$LN10@Orphan_ptr:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Al$1 = -12						; size = 4
__Pnode$2 = -8						; size = 4
_this$ = -4						; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase, COMDAT
; _this$ = ecx

; 2069 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2070 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	DWORD PTR __Pnode$2[ebp], eax
	jmp	SHORT $LN4@Erase
$LN2@Erase:
	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	DWORD PTR __Rootnode$[ebp], ecx
$LN4@Erase:
	mov	edx, DWORD PTR __Pnode$2[ebp]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	jne	SHORT $LN1@Erase

; 2071 : 			{	// free subtrees, then node
; 2072 : 			_Erase(_Pnode->_Right);

	mov	ecx, DWORD PTR __Pnode$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase

; 2073 : 			_Pnode = _Pnode->_Left;

	mov	eax, DWORD PTR __Pnode$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$2[ebp], ecx

; 2074 : 			_Alnode& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	mov	DWORD PTR __Al$1[ebp], eax

; 2075 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$1[ebp]
	push	eax
	call	??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
	add	esp, 8

; 2076 : 			_Node::_Freenode0(_Al, _Rootnode);

	mov	ecx, DWORD PTR __Rootnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$1[ebp]
	push	edx
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 2077 : 			}

	jmp	SHORT $LN2@Erase
$LN1@Erase:

; 2078 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node, COMDAT
; _this$ = ecx

; 1639 : 		{	// node doesn't exist, do nothing

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1640 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Head$ = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear, COMDAT
; _this$ = ecx

; 1455 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1456 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1457 : 		this->_Orphan_ptr(nullptr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr

; 1458 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1459 : 
; 1460 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1461 : 		auto _Head = _My_data._Myhead;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 1462 : 		_Erase(_My_data._Root());

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase

; 1463 : 		_My_data._Root() = _Head;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR __Head$[ebp]
	mov	DWORD PTR [eax], ecx

; 1464 : 		_My_data._Lmost() = _Head;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR __Head$[ebp]
	mov	DWORD PTR [eax], edx

; 1465 : 		_My_data._Rmost() = _Head;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	ecx, DWORD PTR __Head$[ebp]
	mov	DWORD PTR [eax], ecx

; 1466 : 		_My_data._Mysize = 0;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1467 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
tv193 = -88						; size = 4
tv86 = -84						; size = 4
tv180 = -80						; size = 4
tv200 = -76						; size = 4
tv175 = -72						; size = 4
tv152 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 12
$T4 = -48						; size = 4
$T5 = -44						; size = 12
$T6 = -32						; size = 12
$T7 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase, COMDAT
; _this$ = ecx

; 1432 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1433 : 		if (_First == begin() && _Last == end())

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv175[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR tv175[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@erase
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
	mov	DWORD PTR tv200[ebp], eax
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv180[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 2
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR tv180[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@erase
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN8@erase
$LN7@erase:
	mov	DWORD PTR tv86[ebp], 0
$LN8@erase:
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR $T7[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T2[ebp]
	and	edx, 2
	je	SHORT $LN15@erase
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN15@erase:
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	SHORT $LN16@erase
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN16@erase:
	movzx	ecx, BYTE PTR $T7[ebp]
	test	ecx, ecx
	je	SHORT $LN2@erase

; 1434 : 			{	// erase all
; 1435 : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::clear

; 1436 : 			return (begin());

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@erase

; 1437 : 			}
; 1438 : 		else

	jmp	$LN5@erase
$LN2@erase:

; 1439 : 			{	// partial erase, one at a time
; 1440 : 			while (_First != _Last)

	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@erase

; 1441 : 				erase(_First++);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T4[ebp], esp
	push	0
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv193[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1442 : 			return (iterator(_First._Ptr, _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@erase
$LN5@erase:

; 1443 : 			}
; 1444 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN1@erase:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$2:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN12@erase
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN12@erase:
	ret	0
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z$3:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 2
	je	$LN14@erase
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN14@erase:
	ret	0
__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@0@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
_TEXT	SEGMENT
tv184 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
__Al$ = -48						; size = 4
__Erasednode$ = -44					; size = 4
__Successor$ = -36					; size = 12
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase, COMDAT
; _this$ = ecx

; 1406 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1407 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1408 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1409 : 		if (_Where._Getcont() != _STD addressof(_My_data)
; 1410 : 			|| _Where._Ptr->_Isnil)

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN3@erase
	mov	ecx, DWORD PTR __Where$[ebp+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN2@erase
$LN3@erase:

; 1411 : 			{
; 1412 : 			_DEBUG_ERROR("map/set erase iterator outside range");

	push	1412					; 00000584H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	1412					; 00000584H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAs?$AAe?$AAt?$AA_?$AAt?$AAr?$AAa?$AAi@
	push	OFFSET ??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@erase:

; 1413 : 			}
; 1414 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1415 : 
; 1416 : 		const_iterator _Successor = _Where;

	lea	eax, DWORD PTR __Where$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Successor$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1417 : 		++_Successor;	// save successor iterator for return

	lea	ecx, DWORD PTR __Successor$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++

; 1418 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract
	mov	DWORD PTR tv184[ebp], eax
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR __Erasednode$[ebp], eax

; 1419 : 
; 1420 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1421 : 		_Orphan_ptr(_Erasednode);

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_ptr@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_ptr

; 1422 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1423 : 
; 1424 : 		_Alnode& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1425 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node

	mov	edx, DWORD PTR __Erasednode$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
	add	esp, 8

; 1426 : 		_Node::_Freenode0(_Al, _Erasednode);

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 1427 : 
; 1428 : 		return (iterator(_Successor._Ptr, _STD addressof(_My_data)));	// return successor iterator

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Successor$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Successor$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1429 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@erase
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN13@erase:
	DD	1
	DD	$LN12@erase
$LN12@erase:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN10@erase
$LN10@erase:
	DB	95					; 0000005fH
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$1:
	lea	ecx, DWORD PTR __Successor$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty, COMDAT
; _this$ = ecx

; 1325 : 		{	// return true only if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1326 : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
	test	eax, eax
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv67[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv67[ebp]

; 1327 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size, COMDAT
; _this$ = ecx

; 1320 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1321 : 		return (_Alnode_traits::max_size(this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
	add	esp, 4

; 1322 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size, COMDAT
; _this$ = ecx

; 1315 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1316 : 		return (this->_Get_data()._Mysize);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	eax, DWORD PTR [eax+8]

; 1317 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end, COMDAT
; _this$ = ecx

; 1243 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1244 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1245 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1246 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::end
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin, COMDAT
; _this$ = ecx

; 1231 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1232 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1233 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1234 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 1213 : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1214 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tidy

; 1215 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 1131 : 		{	// construct empty tree from comparator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1130 : 		: _Mybase(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >

; 1132 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 354  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 349  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ PROC ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 329  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 331  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 354  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 349  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 334  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 336  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 329  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 331  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv182 = -44						; size = 4
tv171 = -40						; size = 4
$T2 = -36						; size = 4
__Pnode$ = -32						; size = 4
__Fixnodeparent$ = -28					; size = 4
__Fixnode$ = -24					; size = 4
__Erasednode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Where$ = 8						; size = 12
?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract, COMDAT
; _this$ = ecx

; 605  : 		{	// extract node at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 606  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 607  : 		if (_Where._Getcont() != this
; 608  : 			|| _Where._Ptr->_Isnil)

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN6@Extract
	mov	eax, DWORD PTR __Where$[ebp+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN5@Extract
$LN6@Extract:

; 609  : 			{
; 610  : 			_DEBUG_ERROR("map/set erase iterator outside range");

	push	610					; 00000262H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EK@PPDBPCAN@?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	610					; 00000262H
	push	OFFSET ??_C@_1MM@MDHNIKFI@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1JG@CMEBBEHE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe@
	push	OFFSET ??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Extract:

; 611  : 			}
; 612  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 613  : 
; 614  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

	mov	edx, DWORD PTR __Where$[ebp+8]
	mov	DWORD PTR __Erasednode$[ebp], edx

; 615  : 		++_Where;	// save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator++

; 616  : 
; 617  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 618  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 619  : 		_Nodeptr _Pnode = _Erasednode;

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 620  : 
; 621  : 		if (_Pnode->_Left->_Isnil)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN7@Extract

; 622  : 			{
; 623  : 			_Fixnode = _Pnode->_Right;	// stitch up right subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Fixnode$[ebp], edx
	jmp	SHORT $LN8@Extract
$LN7@Extract:

; 624  : 			}
; 625  : 		else if (_Pnode->_Right->_Isnil)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN9@Extract

; 626  : 			{
; 627  : 			_Fixnode = _Pnode->_Left;	// stitch up left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 628  : 			}
; 629  : 		else

	jmp	SHORT $LN8@Extract
$LN9@Extract:

; 630  : 			{	// two subtrees, must lift successor node to replace erased
; 631  : 			_Pnode = _Where._Ptr;	// _Pnode is successor node

	mov	edx, DWORD PTR __Where$[ebp+8]
	mov	DWORD PTR __Pnode$[ebp], edx

; 632  : 			_Fixnode = _Pnode->_Right;	// _Fixnode is only subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Fixnode$[ebp], ecx
$LN8@Extract:

; 633  : 			}
; 634  : 
; 635  : 		if (_Pnode == _Erasednode)

	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	$LN11@Extract

; 636  : 			{	// at most one subtree, relink it
; 637  : 			_Fixnodeparent = _Erasednode->_Parent;

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 638  : 			if (!_Fixnode->_Isnil)

	mov	edx, DWORD PTR __Fixnode$[ebp]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	jne	SHORT $LN13@Extract

; 639  : 				_Fixnode->_Parent = _Fixnodeparent;	// link up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN13@Extract:

; 640  : 
; 641  : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN14@Extract

; 642  : 				{
; 643  : 				_Root() = _Fixnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN15@Extract
$LN14@Extract:

; 644  : 				}
; 645  : 			else if (_Fixnodeparent->_Left == _Erasednode)

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN16@Extract

; 646  : 				{
; 647  : 				_Fixnodeparent->_Left = _Fixnode;	// link down to left

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 648  : 				}
; 649  : 			else

	jmp	SHORT $LN15@Extract
$LN16@Extract:

; 650  : 				{
; 651  : 				_Fixnodeparent->_Right = _Fixnode;	// link down to right

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN15@Extract:

; 652  : 				}
; 653  : 
; 654  : 			if (_Lmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN18@Extract

; 655  : 				{
; 656  : 				_Lmost() = _Fixnode->_Isnil

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN44@Extract
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN45@Extract
$LN44@Extract:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
	add	esp, 4
	mov	DWORD PTR tv171[ebp], eax
$LN45@Extract:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	ecx, DWORD PTR tv171[ebp]
	mov	DWORD PTR [eax], ecx
$LN18@Extract:

; 657  : 					? _Fixnodeparent	// smallest is parent of erased node
; 658  : 					: _Min(_Fixnode);	// smallest in relinked subtree
; 659  : 				}
; 660  : 
; 661  : 			if (_Rmost() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN19@Extract

; 662  : 				{
; 663  : 				_Rmost() = _Fixnode->_Isnil

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN46@Extract
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN47@Extract
$LN46@Extract:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	push	eax
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
	add	esp, 4
	mov	DWORD PTR tv182[ebp], eax
$LN47@Extract:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR [eax], ecx
$LN19@Extract:

; 664  : 					? _Fixnodeparent	// largest is parent of erased node
; 665  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 666  : 				}
; 667  : 			}
; 668  : 		else

	jmp	$LN12@Extract
$LN11@Extract:

; 669  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 670  : 			_Erasednode->_Left->_Parent = _Pnode;	// link left up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 671  : 			_Pnode->_Left = _Erasednode->_Left;	// link successor down

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 672  : 
; 673  : 			if (_Pnode == _Erasednode->_Right)

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN20@Extract

; 674  : 				{
; 675  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 676  : 				}
; 677  : 			else

	jmp	SHORT $LN21@Extract
$LN20@Extract:

; 678  : 				{	// successor further down, link in place of erased
; 679  : 				_Fixnodeparent = _Pnode->_Parent;	// parent is successor's

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax

; 680  : 				if (!_Fixnode->_Isnil)

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN22@Extract

; 681  : 					{
; 682  : 					_Fixnode->_Parent = _Fixnodeparent;	// link fix up

	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN22@Extract:

; 683  : 					}
; 684  : 
; 685  : 				_Fixnodeparent->_Left = _Fixnode;	// link fix down

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [edx], eax

; 686  : 				_Pnode->_Right = _Erasednode->_Right;	// link next down

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 687  : 				_Erasednode->_Right->_Parent = _Pnode;	// right up

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN21@Extract:

; 688  : 				}
; 689  : 
; 690  : 			if (_Root() == _Erasednode)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN23@Extract

; 691  : 				{
; 692  : 				_Root() = _Pnode;	// link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN24@Extract
$LN23@Extract:

; 693  : 				}
; 694  : 			else if (_Erasednode->_Parent->_Left == _Erasednode)

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN25@Extract

; 695  : 				{
; 696  : 				_Erasednode->_Parent->_Left = _Pnode;	// link down to left

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 697  : 				}
; 698  : 			else

	jmp	SHORT $LN24@Extract
$LN25@Extract:

; 699  : 				{
; 700  : 				_Erasednode->_Parent->_Right = _Pnode;	// link down to right

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN24@Extract:

; 701  : 				}
; 702  : 
; 703  : 			_Pnode->_Parent = _Erasednode->_Parent;	// link successor up

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 704  : 			_STD swap(_Pnode->_Color, _Erasednode->_Color);	// recolor it

	mov	eax, DWORD PTR __Erasednode$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	??$swap@DX@std@@YAXAAD0@Z		; std::swap<char,void>
	add	esp, 8
$LN12@Extract:

; 705  : 			}
; 706  : 
; 707  : 		if (_Erasednode->_Color == this->_Black)

	mov	edx, DWORD PTR __Erasednode$[ebp]
	movsx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	$LN27@Extract

; 708  : 			{	// erasing black link, must recolor/rebalance tree
; 709  : 			for (; _Fixnode != _Root()

	jmp	SHORT $LN4@Extract
$LN2@Extract:

; 711  : 				_Fixnodeparent = _Fixnode->_Parent)

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx
$LN4@Extract:

; 710  : 				&& _Fixnode->_Color == this->_Black;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	$LN3@Extract
	mov	edx, DWORD PTR __Fixnode$[ebp]
	movsx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	$LN3@Extract

; 712  : 				if (_Fixnode == _Fixnodeparent->_Left)

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN28@Extract

; 713  : 					{	// fixup left subtree
; 714  : 					_Pnode = _Fixnodeparent->_Right;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 715  : 					if (_Pnode->_Color == this->_Red)

	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	SHORT $LN30@Extract

; 716  : 						{	// rotate red up from right subtree
; 717  : 						_Pnode->_Color = this->_Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 1

; 718  : 						_Fixnodeparent->_Color = this->_Red;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [edx+12], 0

; 719  : 						_Lrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate

; 720  : 						_Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN30@Extract:

; 721  : 						}
; 722  : 
; 723  : 					if (_Pnode->_Isnil)

	mov	eax, DWORD PTR __Pnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN31@Extract

; 724  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 725  : 					else if (_Pnode->_Left->_Color == this->_Black

	jmp	$LN32@Extract
$LN31@Extract:

; 726  : 						&& _Pnode->_Right->_Color == this->_Black)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	SHORT $LN33@Extract
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	SHORT $LN33@Extract

; 727  : 						{	// redden right subtree with black children
; 728  : 						_Pnode->_Color = this->_Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 0

; 729  : 						_Fixnode = _Fixnodeparent;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 730  : 						}
; 731  : 					else

	jmp	SHORT $LN32@Extract
$LN33@Extract:

; 732  : 						{	// must rearrange right subtree
; 733  : 						if (_Pnode->_Right->_Color == this->_Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN35@Extract

; 734  : 							{	// rotate red up from left sub-subtree
; 735  : 							_Pnode->_Left->_Color = this->_Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+12], 1

; 736  : 							_Pnode->_Color = this->_Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 0

; 737  : 							_Rrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate

; 738  : 							_Pnode = _Fixnodeparent->_Right;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN35@Extract:

; 739  : 							}
; 740  : 
; 741  : 						_Pnode->_Color = _Fixnodeparent->_Color;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR [edx+12], cl

; 742  : 						_Fixnodeparent->_Color = this->_Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [edx+12], 1

; 743  : 						_Pnode->_Right->_Color = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+12], 1

; 744  : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate

; 745  : 						break;	// tree now recolored/rebalanced

	jmp	$LN3@Extract
$LN32@Extract:

; 746  : 						}
; 747  : 					}
; 748  : 				else

	jmp	$LN29@Extract
$LN28@Extract:

; 749  : 					{	// fixup right subtree
; 750  : 					_Pnode = _Fixnodeparent->_Left;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 751  : 					if (_Pnode->_Color == this->_Red)

	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	SHORT $LN36@Extract

; 752  : 						{	// rotate red up from left subtree
; 753  : 						_Pnode->_Color = this->_Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 1

; 754  : 						_Fixnodeparent->_Color = this->_Red;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [edx+12], 0

; 755  : 						_Rrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate

; 756  : 						_Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN36@Extract:

; 757  : 						}
; 758  : 
; 759  : 					if (_Pnode->_Isnil)

	mov	eax, DWORD PTR __Pnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN37@Extract

; 760  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 761  : 					else if (_Pnode->_Right->_Color == this->_Black

	jmp	$LN29@Extract
$LN37@Extract:

; 762  : 						&& _Pnode->_Left->_Color == this->_Black)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	SHORT $LN39@Extract
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	SHORT $LN39@Extract

; 763  : 						{	// redden left subtree with black children
; 764  : 						_Pnode->_Color = this->_Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 0

; 765  : 						_Fixnode = _Fixnodeparent;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 766  : 						}
; 767  : 					else

	jmp	SHORT $LN29@Extract
$LN39@Extract:

; 768  : 						{	// must rearrange left subtree
; 769  : 						if (_Pnode->_Left->_Color == this->_Black)

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN41@Extract

; 770  : 							{	// rotate red up from right sub-subtree
; 771  : 							_Pnode->_Right->_Color = this->_Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+12], 1

; 772  : 							_Pnode->_Color = this->_Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 0

; 773  : 							_Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate

; 774  : 							_Pnode = _Fixnodeparent->_Left;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN41@Extract:

; 775  : 							}
; 776  : 
; 777  : 						_Pnode->_Color = _Fixnodeparent->_Color;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR [edx+12], cl

; 778  : 						_Fixnodeparent->_Color = this->_Black;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [edx+12], 1

; 779  : 						_Pnode->_Left->_Color = this->_Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+12], 1

; 780  : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate

; 781  : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN3@Extract
$LN29@Extract:

; 782  : 						}
; 783  : 					}

	jmp	$LN2@Extract
$LN3@Extract:

; 784  : 
; 785  : 			_Fixnode->_Color = this->_Black;	// stopping node is black

	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN27@Extract:

; 786  : 			}
; 787  : 
; 788  : 		if (0 < _Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN42@Extract

; 789  : 			--_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN42@Extract:

; 790  : 
; 791  : 		return (_Erasednode);

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]

; 792  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate, COMDAT
; _this$ = ecx

; 579  : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 		_Nodeptr _Pnode = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 581  : 		_Wherenode->_Left = _Pnode->_Right;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 582  : 
; 583  : 		if (!_Pnode->_Right->_Isnil)

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Rrotate

; 584  : 			_Pnode->_Right->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 585  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 586  : 
; 587  : 		if (_Wherenode == _Myhead->_Parent)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 588  : 			{
; 589  : 			_Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Rrotate
$LN3@Rrotate:

; 590  : 			}
; 591  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 592  : 			{
; 593  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 594  : 			}
; 595  : 		else

	jmp	SHORT $LN4@Rrotate
$LN5@Rrotate:

; 596  : 			{
; 597  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Rrotate:

; 598  : 			}
; 599  : 
; 600  : 		_Pnode->_Right = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 601  : 		_Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 602  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate, COMDAT
; _this$ = ecx

; 550  : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 551  : 		_Nodeptr _Pnode = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 552  : 		_Wherenode->_Right = _Pnode->_Left;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 553  : 
; 554  : 		if (!_Pnode->_Left->_Isnil)

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Lrotate

; 555  : 			{
; 556  : 			_Pnode->_Left->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 557  : 			}
; 558  : 
; 559  : 		_Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 560  : 
; 561  : 		if (_Wherenode == _Myhead->_Parent)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 562  : 			{
; 563  : 			_Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Lrotate
$LN3@Lrotate:

; 564  : 			}
; 565  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 566  : 			{
; 567  : 			_Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 568  : 			}
; 569  : 		else

	jmp	SHORT $LN4@Lrotate
$LN5@Lrotate:

; 570  : 			{
; 571  : 			_Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 572  : 			}
; 573  : 
; 574  : 		_Pnode->_Left = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx], eax

; 575  : 		_Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 576  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost, COMDAT
; _this$ = ecx

; 545  : 		{	// return rightmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 546  : 		return (_Myhead->_Right);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 8

; 547  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost, COMDAT
; _this$ = ecx

; 540  : 		{	// return leftmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 541  : 		return (_Myhead->_Left);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 542  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root, COMDAT
; _this$ = ecx

; 535  : 		{	// return root of nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 536  : 		return (_Myhead->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 4

; 537  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min, COMDAT

; 528  : 		{	// return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 529  : 		while (!_Pnode->_Left->_Isnil)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Min

; 530  : 			_Pnode = _Pnode->_Left;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Min
$LN3@Min:

; 531  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 532  : 		}

	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max, COMDAT

; 521  : 		{	// return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Max:

; 522  : 		while (!_Pnode->_Right->_Isnil)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Max

; 523  : 			_Pnode = _Pnode->_Right;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx
	jmp	SHORT $LN2@Max
$LN3@Max:

; 524  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 525  : 		}

	pop	ebp
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >, COMDAT
; _this$ = ecx

; 513  : 		{	// initialize data

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 511  : 		: _Myhead(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 512  : 		_Mysize(0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 514  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xstddef
;	COMDAT ??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z PROC	; std::less<Telegram>::operator(), COMDAT
; _this$ = ecx

; 183  : 		{	// apply operator< to operands

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 		return (_Left < _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??M@YA_NABUTelegram@@0@Z		; operator<
	add	esp, 8

; 185  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ENDP	; std::less<Telegram>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1065 : 		{	// return const reference to _Tree_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1066 : 		return (_Mypair._Get_second()._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
	mov	ecx, eax
	call	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second

; 1067 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1060 : 		{	// return reference to _Tree_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1061 : 		return (_Mypair._Get_second()._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
	mov	ecx, eax
	call	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_second

; 1062 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal, COMDAT
; _this$ = ecx

; 1055 : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1056 : 		return (_Mypair._Get_second()._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
	mov	ecx, eax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first

; 1057 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal, COMDAT
; _this$ = ecx

; 1050 : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1051 : 		return (_Mypair._Get_second()._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_second
	mov	ecx, eax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first

; 1052 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1040 : 		{	// return reference to ordering predicate

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1041 : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first

; 1042 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAU?$less@UTelegram@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 1016 : 		{	// free non-value node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1017 : 		_Node::_Freenode0(_Getal(), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 1018 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
__Pnode$ = -28						; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 997  : 		{	// allocate a non-value node

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 998  : 		_Alnode& _Al = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 999  : 		_Nodeptr _Pnode = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1000 : 
; 1001 : 		auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1002 : 
; 1003 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1004 : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _My_data._Myhead);

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 1005 : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _My_data._Myhead);

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 1006 : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _My_data._Myhead);

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 8
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Buynode0
__catch$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0:

; 1007 : 		_CATCH_ALL
; 1008 : 		_Al.deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate

; 1009 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1010 : 		_CATCH_END

	mov	eax, $LN7@Buynode0
	ret	0
$LN4@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1
$LN7@Buynode0:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1:

; 1011 : 
; 1012 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode0:

; 1013 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode0
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 992  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 993  : 		_Node::_Freenode0(_Getal(), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 994  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
__Pnode$ = -32						; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buyheadnode, COMDAT
; _this$ = ecx

; 973  : 		{	// get head node using current allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 974  : 		_Alnode& _Al = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 975  : 		_Nodeptr _Pnode = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 976  : 
; 977  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 978  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 979  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 980  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 8
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Buyheadnod
__catch$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$0:

; 981  : 		_CATCH_ALL
; 982  : 		_Al.deallocate(_Pnode, 1);

	push	1
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate

; 983  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 984  : 		_CATCH_END

	mov	eax, $LN7@Buyheadnod
	ret	0
$LN4@Buyheadnod:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1
$LN7@Buyheadnod:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ$1:

; 985  : 
; 986  : 		_Pnode->_Color = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 1

; 987  : 		_Pnode->_Isnil = true;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+13], 1

; 988  : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN3@Buyheadnod:

; 989  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@Buyheadnod:
	DD	1
	DD	$LN10@Buyheadnod
$LN10@Buyheadnod:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@Buyheadnod
$LN8@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buyheadnode
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Orphan_all@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_all, COMDAT
; _this$ = ecx

; 963  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 965  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy, COMDAT
; _this$ = ecx

; 912  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 913  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data

; 914  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Getpfirst@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getpfirst, COMDAT
; _this$ = ecx

; 907  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 909  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Free_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Free_proxy, COMDAT
; _this$ = ecx

; 898  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 899  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >

; 900  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Orphan_all

; 901  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 902  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 903  : 		_Myproxy() = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
	mov	DWORD PTR [eax], 0

; 904  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 890  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 891  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >

; 892  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
	mov	DWORD PTR [eax], esi

; 893  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 894  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 895  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 884  : 		{	// destroy head node, proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 885  : 		_Freeheadnode(_Get_data()._Myhead);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	eax, DWORD PTR [eax+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freeheadnode

; 886  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Free_proxy

; 887  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__My_data$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Construct, COMDAT
; _this$ = ecx

; 872  : 		{	// construct head node, proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 873  : 		auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 874  : 		_My_data._Myhead = _Buyheadnode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buyheadnode
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 875  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 876  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_proxy
	jmp	SHORT $LN4@Construct
__catch$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ$0:

; 877  : 		_CATCH_ALL
; 878  : 		_Freeheadnode(_My_data._Myhead);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Freeheadnode

; 879  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 880  : 		_CATCH_END

	mov	eax, $LN7@Construct
	ret	0
$LN4@Construct:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@Construct
$LN7@Construct:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@Construct:

; 881  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Construct
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 837  : 		{	// construct from comparator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 835  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>

; 838  : 		_Construct();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Construct

; 839  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_comp_alloc@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree_comp_alloc<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size, COMDAT

; 930  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 931  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 89478485				; 05555555H

; 932  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate, COMDAT

; 910  : 		{	// deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 911  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 912  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 48
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 913  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate, COMDAT
; _this$ = ecx

; 1035 : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1036 : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0DA@@std@@YAII@Z	; std::_Get_size_of_n<48>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 1037 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate, COMDAT
; _this$ = ecx

; 1029 : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1030 : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 1031 : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 48
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 1032 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >, COMDAT
; _this$ = ecx

; 1018 : 	allocator() _NOEXCEPT

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1019 : 		{	// construct default allocator (do nothing)
; 1020 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\set
;	COMDAT ?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z PROC ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn, COMDAT

; 44   : 		{	// extract key from element value

	push	ebp
	mov	ebp, esp

; 45   : 		return (_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 46   : 		}

	pop	ebp
	ret	0
?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ENDP ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\telegram.h
;	COMDAT ??M@YA_NABUTelegram@@0@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??M@YA_NABUTelegram@@0@Z PROC				; operator<, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 77   :   if (t1 == t2)

	mov	eax, DWORD PTR _t2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1$[ebp]
	push	ecx
	call	??8@YA_NABUTelegram@@0@Z		; operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@operator

; 78   :   {
; 79   :     return false;

	xor	al, al
	jmp	SHORT $LN3@operator

; 80   :   }
; 81   : 
; 82   :   else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 83   :   {
; 84   :     return  (t1.DispatchTime < t2.DispatchTime);

	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR _t1$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jbe	SHORT $LN5@operator
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv72[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv72[ebp]
$LN3@operator:

; 85   :   }
; 86   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??M@YA_NABUTelegram@@0@Z ENDP				; operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\telegram.h
;	COMDAT ??8@YA_NABUTelegram@@0@Z
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv88 = -8						; size = 8
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??8@YA_NABUTelegram@@0@Z PROC				; operator==, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 69   :   return ( fabs(t1.DispatchTime-t2.DispatchTime) < SmallestDelay) &&

	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR _t2$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	subsd	xmm0, QWORD PTR [ecx+16]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv88[ebp]
	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	comisd	xmm0, QWORD PTR tv88[ebp]
	jbe	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv79[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv79[ebp]

; 70   :           (t1.Sender == t2.Sender)        &&
; 71   :           (t1.Receiver == t2.Receiver)    &&
; 72   :           (t1.Msg == t2.Msg);
; 73   : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??8@YA_NABUTelegram@@0@Z ENDP				; operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\telegram.h
;	COMDAT ??0Telegram@@QAE@NHHHPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
_sender$ = 16						; size = 4
_receiver$ = 20						; size = 4
_msg$ = 24						; size = 4
_info$ = 28						; size = 4
??0Telegram@@QAE@NHHHPAX@Z PROC				; Telegram::Telegram, COMDAT
; _this$ = ecx

; 55   :   {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :                                Sender(sender),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sender$[ebp]
	mov	DWORD PTR [eax], ecx

; 52   :                                Receiver(receiver),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _receiver$[ebp]
	mov	DWORD PTR [edx+4], eax

; 53   :                                Msg(msg),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 50   :            void*  info = NULL): DispatchTime(time),

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _time$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 54   :                                ExtraInfo(info)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 55   :   {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Telegram@@QAE@NHHHPAX@Z ENDP				; Telegram::Telegram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 111  : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			: _Id(_Val)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 112  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 116  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 117  : 	_Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 118  : 
; 119  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 120  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx

; 121  : 
; 122  :   #ifdef _DEBUG
; 123  : 	// If the following asserts, it likely means that we are performing
; 124  : 	// an aligned delete on memory coming from an unaligned allocation.
; 125  : 	if (_Ptr_user[-2] != _Big_allocation_sentinel)

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	je	SHORT $LN2@Adjust_man

; 126  : 		{
; 127  : 		_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

	push	0
	push	127					; 0000007fH
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Adjust_man:

; 128  : 		}
; 129  :   #endif /* _DEBUG */
; 130  : 
; 131  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 132  : 	// in range [_Min_back_shift, _Non_user_size]
; 133  :   #ifdef _DEBUG
; 134  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 135  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 136  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 137  :   #endif /* _DEBUG */
; 138  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx

; 139  : 	if (_Back_shift < _Min_back_shift || _Back_shift > _Non_user_size)

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN4@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	jbe	SHORT $LN3@Adjust_man
$LN4@Adjust_man:

; 140  : 		{
; 141  : 		_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

	push	0
	push	141					; 0000008dH
	push	OFFSET ??_C@_1NC@KEJAAGP@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa?$AAn?$AAu?$AAa?$AAl?$AAl?$AAy?$AA_?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAa?$AAl?$AAi@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Adjust_man:

; 142  : 		}
; 143  : 
; 144  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 145  : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

	push	ebp
	mov	ebp, esp

; 52   : 		return (::operator new(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 53   : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 226  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 227  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 228  : 		if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me

; 229  : 			{	// adopted, remove self from list
; 230  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
$LN2@Orphan_me:

; 231  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_me
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN3@Orphan_me

; 232  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$2[ebp], ecx
	jmp	SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 233  : 
; 234  : 			if (*_Pnext == 0)

	mov	edx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN5@Orphan_me

; 235  : 				{
; 236  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	236					; 000000ecH
	push	OFFSET ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
	push	0
	push	236					; 000000ecH
	push	OFFSET ??_C@_1NC@PHKCNFMM@?$AAd?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN5@Orphan_me:

; 237  : 				}
; 238  : 
; 239  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 240  : 			_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN6@Orphan_me:

; 241  : 			}
; 242  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 243  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 221  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 222  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 223  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 216  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 217  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 218  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 211  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 212  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 213  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 182  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		if (_Parent == 0)

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt

; 184  : 			{	// no future parent, just disown current parent
; 185  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 186  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 187  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 188  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 189  : 			}

	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 190  : 		else

	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 191  : 			{	// have a parent, do adoption
; 192  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 193  : 
; 194  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 195  : 			if (_Myproxy != _Parent_proxy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN5@Adopt

; 196  : 				{	// change parentage
; 197  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 198  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 199  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 200  : 				_Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 201  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 202  : 				}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Adopt:

; 203  : 
; 204  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 205  : 			_Myproxy = _Parent_proxy;
; 206  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 207  : 			}
; 208  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@Adopt:
	DD	2
	DD	$LN9@Adopt
$LN9@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@Adopt
$LN7@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 174  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 175  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 176  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 177  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 178  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 179  : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Iterator_b:
	DD	1
	DD	$LN5@Iterator_b
$LN5@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 157  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		if (_Myproxy == _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@operator
	jmp	SHORT $LN3@operator
$LN2@operator:

; 159  : 			;
; 160  : 		else if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@operator

; 161  : 			_Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 162  : 		else

	jmp	SHORT $LN3@operator
$LN4@operator:

; 163  : 			{	// becoming invalid, disown current parent
; 164  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 165  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 166  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@operator:

; 169  : 
; 170  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 171  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@operator:
	DD	1
	DD	$LN9@operator
$LN9@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@operator
$LN7@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 152  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 		: _Myproxy(0), _Mynextiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 153  : 		*this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 154  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 147  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 		: _Myproxy(0), _Mynextiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 148  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 251  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 252  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 253  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 254  : 		{	// proxy allocated, drain it
; 255  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 256  : 
; 257  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 258  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 259  : 			(*_Pnext)->_Myproxy = 0;

	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 260  : 		_Myproxy->_Myfirstiter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 261  : 		}

	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 262  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 263  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 132  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 134  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 118  : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		: _Myproxy(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 119  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 106  : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		: _Mycont(0), _Myfirstiter(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 107  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 180  :     {

	push	ebp
	mov	ebp, esp

; 181  :         (void)_Size;
; 182  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 183  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 1152 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1153 : 		return (_DBL_MAX);

	fld	QWORD PTR __real@7fefffffffffffff

; 1154 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 1147 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1148 : 		return (_DBL_MIN);

	fld	QWORD PTR __real@0010000000000000

; 1149 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 1089 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1090 : 		return (_FLT_MAX);

	fld	DWORD PTR __real@7f7fffff

; 1091 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 1084 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1085 : 		return (_FLT_MIN);

	fld	DWORD PTR __real@00800000

; 1086 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.14.26428\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 683  : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 684  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 685  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\ia jeux vidéo\projets\uqac_ia_jv_miniprojet\common\messaging\messagedispatcher.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
